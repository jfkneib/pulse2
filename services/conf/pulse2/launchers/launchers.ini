# [launchers]
# Pulse2 Launcher path
# launcher_path = /usr/sbin/pulse2-launcher

## Misc locations ##
# Source directory for push mode
# source_path = /var/lib/pulse2/packages
# target directory
# target_path = /tmp
# Pulse2 Ping path
# ping_path = /usr/sbin/pulse2-ping

# global inventory command
# inventory_command = echo Doing inventory

# global reboot command
# reboot_command = /bin/shutdown.exe -f -r 1 || shutdown -r now

# global halt command
# halt_command = /bin/shutdown.exe -f -s 1 || shutdown -h now

# temp folder name prefix on client
# temp_folder_prefix = MDVPLS

# anti-filling system: a command must take less than this value (in seconds), or being killed
# high values mean that the command will have more time to complete, thus may also stay blocked longer
# max_command_age = 86400 (1 day)
# anti-lagging system: a ping (or a probe) is aborded if it takes more that this value (in seconds)
# high values will minimize false-positives (aborded probe even if the client if obviously reachable)
# lower values will enhance interface reposnce time (but lead to more false-positives)
# please note that even if the client is not far (less than 10 ms), the probe may last a very long
# time as sshd perform a reverse DNS query for each incoming connection, which may be problematique
# with a badly configured DNS
# max_probe_time = 20
# max_ping_time = 4

## Wrapper options ##
# [wrapper]
# max_log_size => to cap the amount of logs a wrapper can generate
# max_log_size = 512000 (512 kB)
# max_exec_time => wrapper will quit it process takes longer to complete
# max_exec_time = 21600 (6 hours)
# path = /usr/sbin/pulse2-output-wrapper

### Our SSH options ###
# [ssh]
# ssh_* are ssh keys, * her names
# f.ex. by using sshkey_default = /root/.ssh/id_dsa ,
# /root/.ssh/id_dsa will be known as the 'default' key
# defaultkey is the name of the default SSH key
# default_key = default
# sshkey_default = /root/.ssh/id_dsa
# sshkey_mysecondkey = /somewhere/my_second_key
# options passed to SSH via "-o"
# ssh_options = StrictHostKeyChecking=no Batchmode=yes PasswordAuthentication=no ServerAliveInterval=10 CheckHostIP=no ConnectTimeout=10
# options passed to SCP via "-o"
# scp_options = StrictHostKeyChecking=no Batchmode=yes PasswordAuthentication=no ServerAliveInterval=10 CheckHostIP=no ConnectTimeout=10
# ssh's keyforwarding control: never, always, or let (aka 'let the scheduler decide')
# forward_key = let

### Our wget options (for pull part of the push/pull mode)
# [wget]
# wget_options =
# check_certs = False
# resume = True

### Our rsync options
# [rsync]
# resume = True
# set_executable can be yes, no or keep
# set_executable = keep
# set_access can be private, restricted or public
# set_access = private

# [daemon]
# the place were we put the daemons's PID files
# pidfile = /var/run/pulse2
# user = root
# group = root
# umask = 0077
# Example of non-root execution settings:
# user = mmc
# group = mmc
# umask = 0007

# [wol]
# Pulse2 WOL Path
# wol_path = /usr/sbin/pulse2-wol
# wol_port = 40000
# wol_bcast = 255.255.255.255

# [tcp_sproxy]
# Pulse2 SSH Proxy path
# tcp_sproxy_path = /usr/sbin/pulse2-tcp-sproxy
# important: fill the following option if you plan to use VNC, it will be the "external" IP fomr the VNC client point-of-view
# tcp_sproxy_host =
# the proxy uses a port range to establish proxy to the client: 2 ports used per connection
# tcp_sproxy_port_range = 8100-8200
# the initial ssh connection to the client timeout
# tcp_sproxy_establish_delay = 20
# the proxy allow the initial connection to be established within N seconds (ie. a client as N seconds to connect to the proxy after a port has bee found, then the connection is dropped and further connections will be impossible
# tcp_sproxy_connect_delay = 60
# the number of seconds a connection will stay open after the initial handshake
# tcp_sproxy_session_lenght = 3600

## Our scheduler ##
# used when we have something to tell to our scheduler
[scheduler_01]
# host = 127.0.0.1
# port = 8000
# enablessl = 1
# username = username
# password = password
# periodicaly talk to our referent scheduler
# awake_time = 600
# if set to yes, do no send results directly after a command completion, but when "awake_time" is reached
# defer_results = no

# Launchers sections, one per launcher
[launcher_01]
# bind = 127.0.0.1
port = 8001
# slots = 300
# username = username
# password = password
# scheduler = scheduler_01
enablessl = True
cacert = /etc/mmc/pulse2/launchers/keys/cacert.pem
localcert = /etc/mmc/pulse2/launchers/keys/privkey.pem
verifypeer = False

[loggers]
keys = root

[handlers]
keys = hand01

[formatters]
keys = form01

[logger_root]
level = INFO
handlers = hand01

[handler_hand01]
class = FileHandler
level = INFO
formatter = form01
args = ("/var/log/mmc/pulse2-launchers.log",)

[formatter_form01]
format = %(asctime)s %(levelname)s %(message)s

