[main]
# We will bind on this address ...
# host = 0.0.0.0
# ... and this UDP port
# port = 1001
# required password to record a client, not checked if empty
# adminpass =

[daemon]
# as we are a service, we need some info to be run, such as:
# - the identity we will run into
# user = root
# group = root
# - our umask
# umask = 0077
# and where to record our PID
# pidfile= /var/run/pulse2-imaging-server.pid

[package-server]
# here are described how to talk to our referent package server
#
# host = 127.0.0.1
# port = 9990
# enablessl = True
# username = username
# password = password
# cacert = /etc/mmc/pulse2/imaging-server/keys/cacert.pem
# localcert = /etc/mmc/pulse2/imaging-server/keys/privkey.pem
# verifypeer = False

[hooks]
# hooks_dir = /usr/lib/pulse2/imaging/hooks
#
# 0xAD => "I'm new" action : menu creation request
# arg[1] = source MAC (short)
# arg[2] = given ID (short)
# arg[3] = given PASSWORD (optionnal)
# exit 0 on success
# create_client_path = create_client
#
# 0xAA => "I just booted" action : menu update request + inventory processing request
# arg[1] = source MAC (short)
# client_update_path = update_client
# arg[1] = source MAC (short)
# arg[2] = where the inventory is temporaly stored
# process_inventory_path = process_inventory
#
# 0xEC => "I want to send data" : start a backup request
# arg[1] = source MAC (short)
# arg[2] = kind of backup (L = image, B = Master)
# exit 0 on success
# create_image_path = create_image
#
# 0xCD => "Please change my menu" => change default menu request
# arg[1] = source MAC (short)
# arg[2] = item to use
# exit 0 on success
# update_image_path = update_image
#
# 0x4C => log stuff
# arg[1] = source MAC (short)
# arg[2] = action :
#          0 => booted
#          1 => took item arg[3]
#          2 => starting restoration (more info in arg[3])
#          3 => finished restoration (more info in arg[3])
#          4 => starting backup (more info in arg[3])
#          5 => finished backup (more info in arg[3])
#          6 => started postinst
#          7 => finished postinst
#          8 => critical error
# arg[3] = optional, see upper
# exit 0 on success
# log_action_path = log_action
#
# 0x1A => asks for its uUID
# arg[1] = source MAC (short)
# exit 0 on success, UUID is the last line on stdout
# get_uuid_path = get_uuid
#
# 0x54 => ask for time sync (for mtftp)
# arg[1] = source MAC (short)
# arg[2] = computed sync
# exit 0 on success
# mtftp_sync_path = mtftp_sync

[loggers]
keys = root

[handlers]
keys = hand01

[formatters]
keys = form01

[logger_root]
level = NOTSET
handlers = hand01

[handler_hand01]
class = FileHandler
level = INFO
formatter = form01
args = ("/var/log/mmc/pulse2-imaging-server.log",)

[formatter_form01]
format = %(asctime)s %(levelname)s %(message)s
