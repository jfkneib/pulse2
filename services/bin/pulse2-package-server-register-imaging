#!/usr/bin/python
# -*- coding: utf-8; -*-
#
# (c) 2008-2010 Mandriva, http://www.mandriva.com/
#
# $Id: pulse2-package-server 5210 2010-02-04 17:45:08Z cdelfosse $
#
# This file is part of Pulse 2, http://pulse2.mandriva.org
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2.  If not, see <http://www.gnu.org/licenses/>.

"""
Pulse 2 Package Server Imaging module registration.
"""

import os
import sys
import getopt
from twisted.internet import reactor
import logging

from mmc.site import mmcconfdir
from pulse2.package_server.config import P2PServerCP
from pulse2.apis.clients import Pulse2Api

try:
    import uuid
except ImportError:
    import mmc.support.uuid as uuid

# Error codes
ERROR_NO_UUID = 1
ERROR_BAD_ARGUMENT = 2
ERROR_BAD_CONFIG_PATH = 3
ERROR_BAD_CONFIG = 4
ERROR_REGISTRATION_FAILURE = 5

inifile = mmcconfdir + "/pulse2/package-server/package-server.ini"

log = logging.getLogger()

def display_help():
    """
    Display command line help and exit using specified code
    """
    print "Usage :"
    print "    register                 : pulse2-package-server-register-imaging -m MMC_AGENT_URL -n NAME"
    print "    generate an UUID         : pulse2-package-server-register-imaging -u"
    print "    show help                : pulse2-package-server-register-imaging -h"
    print "With :"
    print "    -m http://...            : MMC Agent URL (mandatory)"
    print "    -n 'My Imaging Server'   : Imaging server name (mandatory)"
    print "    -c 'cacert:localcert     : Verify peer with those certs"
    print "    -f                       : Alternate configuration file (%s)" % inifile
    print "    -u                       : Ask to Generate an UUID"
    print "    -h --help                : Display this help"
    print "    -q --quiet               : Be quiet"
    print "    -V --verbose             : Be more verbose"

class RegisterImagingApi(Pulse2Api):
    """ An API
    """
    name = 'registerrImagingApi'

def generate_uuid():
    """
    Generate (and display) an uuid, telling the user where to pu it
    """
    print uuid.uuid1()

if __name__ == '__main__':
    my_name = None
    mmc_url = None
    verify_peer = None
    cacert = None
    localcert = None
    loglevel = logging.INFO

    if len(sys.argv)==1:
        display_help()
        sys.exit(0)

    try:
        opts, suivarg = getopt.getopt(sys.argv[1:], "f:n:m:h:uc:qV", 
                                      ["help", "quiet", "verbose"])
    except getopt.GetoptError:
        display_help()
        sys.exit(ERROR_BAD_ARGUMENT)

    for option, argument in opts:
        if option in ('-q', '--quiet'):
            loglevel = logging.ERROR
        elif option in ('-V', '--verbose'):
            loglevel = logging.DEBUG
        elif option == "-f": # alternate config file
            inifile = argument
        elif option == "-n": # imaging server name NEEDED!
            my_name = argument
        elif option == "-m": # MMC url
            mmc_url = argument
        elif option == "-u":
            generate_uuid()
            sys.exit(0)
        elif option in ("-h", "--help"):
            display_help()
            sys.exit(0)
        elif option in ("-c"):
            verify_peer = True
            cacert, localcert = argument.split(":")
        else:
            display_help()
            sys.exit(ERROR_BAD_ARGUMENT)

    logging.basicConfig(format='%(levelname)s - %(message)s', level=loglevel)

    failure = False
    if my_name == None:
        log.error("-n opt is mandatory, please put a name for this imaging server")
        failure = True
    if mmc_url == None:
        log.error("-m opt is mandatory, please put the MMC connection url")
        failure = True

    if failure:
        sys.exit(ERROR_BAD_ARGUMENT)

    if not os.path.exists(inifile):
        log.error("File '%s' does not exist." % inifile)
        sys.exit(ERROR_BAD_CONFIG_PATH)

    config = P2PServerCP()

    try:
        # TODO need to put the logger handler for root
        config.setup(inifile)
    except Exception, e:
        log.error(e)
        display_help(ERROR_BAD_CONFIG)

    config.imaging_api['mount_point'] = config.imaging_api['mount_point'].replace('/', '')
    my_url = "%s://%s:%s/%s" % (config.proto, config.public_ip, 
                                str(config.port), 
                                config.imaging_api['mount_point'])
    my_uuid = config.imaging_api['uuid']

    if not my_uuid:
        log.error("Please set the uuid option of the imaging_api section of %s\n" % inifile)
        sys.exit(ERROR_NO_UUID)

    log.debug("Connecting from: %s" % my_url)
    log.debug("UUID: %s" % my_uuid)
    log.debug("Connecting to: %s"%(mmc_url))
    client = RegisterImagingApi('', mmc_url, verify_peer, cacert, localcert)

    def register_callBack(ret):
        try:
            # We should receive a list with two items
            result, msg = ret
        except ValueError:
            log.error("Registration failed, bad XML-RPC response from MMC agent.")
            sys.exit(ERROR_REGISTRATION_FAILURE)

        if result:
            log.info(msg)
        else:
            log.info(msg)
            log.error("Registration failed.")
            sys.exit(ERROR_REGISTRATION_FAILURE)

        # TODO: Not sure it is really needed
        reactor.stop()

    try:
        ret = client.callRemote("imaging.imagingServerRegister", my_name, my_url, my_uuid)
        ret.addCallback(register_callBack)
    except Exception, e:
        log.error("Registration failed: %s" % e)
        sys.exit(ERROR_REGISTRATION_FAILURE)

    reactor.run()
    sys.exit(0)

