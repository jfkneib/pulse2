#!/usr/bin/python
# -*- coding: utf-8; -*-
#
# (c) 2008-2010 Mandriva, http://www.mandriva.com/
#
# $Id: pulse2-package-server 5210 2010-02-04 17:45:08Z cdelfosse $
#
# This file is part of Pulse 2, http://pulse2.mandriva.org
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2.  If not, see <http://www.gnu.org/licenses/>.

"""
Pulse 2 Package Server Imaging module registration.
Need to be known by the MMC
"""
import os
import sys
import getopt
import xmlrpclib

from pulse2.package_server.config import P2PServerCP

try:
    import uuid
except ImportError:
    import mmc.support.uuid as uuid

ERROR_BAD_ARGUMENT = 2

inifile = "/etc/mmc/pulse2/package-server/package-server.ini"

def display_help(code):
    """
    Display command line help and exit using specified code
    """
    if code == ERROR_BAD_ARGUMENT:
        sys.stderr.write("ERROR: Bad command line arguments\n")
    print "Usage :"
    print "    register                 : pulse2-package-server-register-imaging -m MMC_AGENT_URL -n NAME"
    print "    generate an UUID         : pulse2-package-server-register-imaging -u"
    print "    show help                : pulse2-package-server-register-imaging -h"
    print "With :"
    print "    -m http://...            : MMC Agent URL (mandatory)"
    print "    -n 'My Imaging Server'   : Imaging server name (mandatory)"
    print "    -f                       : Alternate configuration file (%s)" % inifile
    print "    -u                       : Ask to Generate an UUID"
    print "    -h --help                : Display this help"
    sys.exit(code)

def generate_uuid():
    """
    Generate (and display) an uuid, telling the user where to pu it
    """
    print "Here is your UUID :"
    print uuid.uuid1()
    sys.exit(0)

my_name = None
mmc_url = None

try:
    opts, suivarg = getopt.getopt(sys.argv[1:], "f:n:m:h:u", ["help"])
except getopt.GetoptError:
    display_help(ERROR_BAD_ARGUMENT)

for option, argument in opts:
    if option == "-f": # alternate config file
        inifile = argument
    elif option == "-n": # imaging server name NEEDED!
        my_name = argument
    elif option == "-m": # MMC url
        mmc_url = argument
    elif option == "-u": # MMC url
        generate_uuid()
    elif option in ("-h", "--help"):
        display_help(0)
    else:
        display_help(ERROR_BAD_ARGUMENT)

failure = False
if my_name == None:
    print "ERROR: -n opt is mandatory, please put a name for this imaging server"
    failure = True
if mmc_url == None:
    print "ERROR: -m opt is mandatory, please put the MMC connection url"
    failure = True

if failure:
    sys.exit(4)

if not os.path.exists(inifile):
    if os.path.exists("/etc/mmc/pulse2/pserver/package-server.ini"):
        print "Please move your configuration file from /etc/mmc/pulse2/pserver/package-server.ini to %s, or use the -f option."%(inifile)
        sys.exit(3)
    print "File '%s' does not exist." % inifile
    sys.exit(3)

config = P2PServerCP()

try:
    # TODO need to put the logger handler for root
    config.setup(inifile)
except Exception, e:
    print "ERROR : %s" % e
    display_help(5)

config.imaging_api['mount_point'] = config.imaging_api['mount_point'].replace('/', '')
my_url = "%s://%s:%s/%s" % (config.proto, config.bind, str(config.port), config.imaging_api['mount_point'])
my_uuid = config.imaging_api['uuid']

if not my_uuid:
    sys.stderr.write("Error: Please set the uuid option of the imaging_api section of %s\n" % inifile)
    sys.exit(1)

print "%s %s" % (my_url, my_uuid)

print "connect to %s"%(mmc_url)
client = xmlrpclib.ServerProxy(mmc_url)

ret = client.imaging.imagingServerRegister(my_name, my_url, my_uuid)
if ret[0]:
    print ret[1]
elif ret[1]:
    print ret[1]
else:
    print "registering failed."


