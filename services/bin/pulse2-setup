#!/usr/bin/env python
# -*- coding: utf-8; -*-
#
# (c) 2011 Mandriva, http://www.mandriva.com/
#
# Author(s):
#   Jean Parpaillon <jparpaillon@mandriva.com>
#
# $Id$
#
# This file is part of Pulse 2, http://pulse2.mandriva.org
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2.  If not, see <http://www.gnu.org/licenses/>.
import os, sys, stat
import readline, getpass
import string
from random import choice
from subprocess import call
from optparse import OptionParser
from ConfigParser import ConfigParser
import sqlalchemy as sa
import logging
import ldap

log = logging.getLogger('pulse2-setup')

def read_opt(prompt, default=None):
    if default is not None:
        prompt += ' (default: %s)' % default
    prompt = 'INPUT    - ' + prompt + ': '
    s = raw_input(prompt)
    if len(s)==0 and default is not None:
        s = default
    return s

def gen_password(size=10):
    return ''.join([choice(string.letters + string.digits) for _ in range(size)])

def read_passwd(prompt):
    match = False
    while not match:
        pwd = getpass.getpass('INPUT    - ' + prompt + ': ')
        pwd2 = getpass.getpass('INPUT    - ' + prompt + ' (confirm): ')
        match = pwd==pwd2
        if not match:
            log.info('Paswords do not match. Retry.')
    return pwd

class Pulse2ConfigParser(ConfigParser):
    clsnames = [ 'PluginsPkgConfig', 'PluginsImagingConfig', 'PluginsGlpiConfig',
                 'PluginsBaseConfig', 'PluginsDyngroupConfig', 'PluginsInventoryConfig',
                 'PluginsPulse2Config', 'PluginsMscConfig', 'InventoryServerConfig', 
                 'LaunchersConfig', 'PackageServerConfig', 'SchedulerConfig',
                 'ImagingServerConfig' ]
    path = None
    defaults = {}
    mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP

    def __init__(self, confdir):
        ConfigParser.__init__(self)
        self.confdir = confdir
        self._populate(self.__class__.defaults)
        self._load()

    def _load(self):
        """ Load config file, if any
        """
        fpath = os.path.join(self.confdir, self.path)
        if self.read(fpath):
            log.debug("Load config file %s" % fpath)
        else:
            log.debug("No such file %s. Will create it." % fpath)

    def _populate(self, d):
        for (name, section) in d.iteritems():
            if not self.has_section(name):
                self.add_section(name)
            for (opt, value) in section.iteritems():
                self.set(name, opt, value)

    def write_path(self, path):
        dirname = os.path.dirname(path)
        if not os.path.isdir(dirname):
            os.makedirs(dirname)
        try:
            f = open(path, 'w')
            self.write(f)
            os.chmod(path, self.mode)
            log.info("Wrote configuration file: %s" % path)
        except IOError, e:
            log.error("Can not write file: %s" % path)
            log.debug(str(e))
            sys.exit(1)
        finally:
            f.close()

    def commit(self):
        self.write_path(os.path.join(self.confdir, self.path))

class LoggingConfig(Pulse2ConfigParser):
    log_path = None

    def __init__(self, *args, **kwargs):
        Pulse2ConfigParser.__init__(self, *args, **kwargs)
        
        # Add logging module configuration
        d = {'loggers': {'keys': 'root'},
             'handlers': {'keys': 'hand01'},
             'formatters': {'keys': 'form01'},
             'logger_root': {'level': 'NOTSET',
                             'handlers': 'hand01'},
             'handler_hand01': {'class': 'FileHandler',
                                'level': 'INFO',
                                'formatter': 'form01',
                                'args': (os.path.join('/var/log/mmc', self.log_path), )},
             'formatter_form01': {'format': '%(asctime)s %(levelname)s %(message)s'}}
        self._populate(d)

class PluginsPkgConfig(Pulse2ConfigParser):
    path = 'plugins/pkgs.ini'
    defaults = {'main': {'disable': 0},
                'user_package_api': {}}

class PluginsImagingConfig(Pulse2ConfigParser):
    path = 'plugins/imaging.ini'
    defaults = {'main': {'disable': 0},
                'database': {'dbdriver': 'mysql',
                             'dbhost': 'localhost',
                             'dbport': 3306,
                             'dbname': 'imaging',
                             'dbuser': 'mmc',
                             'dbpasswd': 'mmc'},
                'web': {}}

class PluginsGlpiConfig(Pulse2ConfigParser):
    path = 'plugins/glpi.ini'
    defaults = {'main': {'disable': 1},
                'querymanager': {}}

class PluginsBaseConfig(Pulse2ConfigParser):
    path = 'plugins/base.ini'
    defaults = {'backup-tools': {'path': '/usr/lib/mmc/backup-tools',
                                 'destpath': '/home/archives'},
                'ldap': {'ldapurl': 'ldap://localhost:389',
                         'basedn': 'dc=mandriva,dc=com',
                         'rootname': 'cn=admin,%(basedn)s',
                         'password': 'secret',
                         'baseusersdn': 'ou=Users,%(basedn)s',
                         'basegroupsdn': 'ou=Groups,%(basedn)s',
                         'userhomeaction': 1,
                         'logfile': '/var/log/ldap.log'},
                'computers': {'method': 'inventory'}}

class PluginsDyngroupConfig(Pulse2ConfigParser):
    path = 'plugins/dyngroup.ini'
    defaults = {'main': {'disable': 0, 
                         'dynamic_enable': 1},
                'database': {'dbdriver': 'mysql',
                             'dbhost': 'localhost',
                             'dbport': 3306,
                             'dbname': 'dyngroup',
                             'dbuser': 'mmc',
                             'dbpasswd': 'mmc'},
                'querymanager': {'activate': 1}}

class PluginsInventoryConfig(Pulse2ConfigParser):
    path = 'plugins/inventory.ini'
    defaults = {'main': {'disable': 0},
                'inventory': {'dbdriver': 'mysql',
                              'dbhost': 'localhost',
                              'dbname': 'inventory',
                              'dbuser': 'mmc',
                              'dbpasswd': 'mmc'},
                'expert_mode': {},
                'graph': {},
                'computers': {}}

class PluginsPulse2Config(Pulse2ConfigParser):
    path = 'plugins/pulse2.ini'
    defaults = {'main': {'disable': 0},
                'database': {'dbdriver': 'mysql',
                             'dbhost': 'localhost',
                             'dbname': 'pulse2',
                             'dbuser': 'mmc',
                             'dbpasswd': 'mmc'}}

class PluginsMscConfig(Pulse2ConfigParser):
    path = 'plugins/msc.ini'
    defaults = {'main': {'disable': 0},
                'msc': {'dbdriver': 'mysql',
                        'dbhost': 'localhost',
                        'dbname': 'msc',
                        'dbuser': 'mmc',
                        'dbpasswd': 'mmc'}}

class InventoryServerConfig(LoggingConfig):
    path = 'pulse2/inventory-server/inventory-server.ini'
    log_path = 'pulse2-inventory-server.log'
    defaults = {'main': {'disable': 0},
                'database': {'dbdriver': 'mysql',
                             'dbhost': 'localhost',
                             'dbname': 'inventory',
                             'dbuser': 'mmc',
                             'dbpasswd': 'mmc'},
                'computers': {},
                'expert_mode': {},
                'graph': {}}

class LaunchersConfig(LoggingConfig):
    path = 'pulse2/launchers/launchers.ini'
    log_path = 'pulse2-launchers.log'
    
class PackageServerConfig(LoggingConfig):
    path = 'pulse2/package-server/package-server.ini'
    log_path = 'pulse2-package-server.log'

class SchedulerConfig(LoggingConfig):
    path = 'pulse2/scheduler/scheduler.ini'
    log_path = 'pulse2-scheduler.log'
    defaults = {'scheduler': {'id': 'scheduler_01'},
                'database': {'dbdriver': 'mysql',
                             'dbhost': 'localhost',
                             'dbname': 'msc',
                             'dbuser': 'mmc',
                             'dbpasswd': 'mmc'},
                'computer': {},
                'expert_mode': {},
                'graph': {}}

class ImagingServerConfig(LoggingConfig):
    path = 'pulse2/imaging-server/imaging-server.ini'
    log_path = 'pulse2-imaging-server.log'

    defaults = {'main': {},
                'daemon': {},
                'hooks': {}}

class SetupApp(object):
    def __init__(self, datadir, confdir):
        self.config = {}
        self.datadir = datadir
        self.confdir = confdir

        # Check if we run as root
        if os.getuid()<>0:
            log.error("Please run this application as root")
            sys.exit(2)

        # Check datadir contains sql snippets
        self.sqldir = os.path.join(datadir, 'sql')
        if not os.path.isdir(self.sqldir):
            log.error('Can not find SQL snippets in %s' % self.sqldir)

        # Get db modules list
        self.dbmodules = [ m for m in os.listdir(self.sqldir) 
                           if os.path.isdir(os.path.join(self.sqldir, m)) ]

        # Load conf files, if existing
        # self.confs will contain path->ConfigParser objects dictionary
        # path is relative to confdir, as in confpaths list above
        self.confs = {}
        for clsname in Pulse2ConfigParser.clsnames:
            cls = globals()[clsname]
            self.confs[cls.path] = cls(self.confdir)

    def init_ldap(self):
        invalids = ['ldapurl', 'ldapbasedn', 'ldapadmindn', 'ldappasswd']
        while len(invalids):
            if 'ldapurl' in invalids:
                self.config['ldapurl'] = read_opt('LDAP uri', 'ldap://localhost:389')
            if 'ldapbasedn' in invalids:
                self.config['ldapbasedn'] = read_opt('LDAP base DN', 'dc=mandriva,dc=com')
            if 'ldapadmindn' in invalids:
                self.config['ldapadmindn'] = read_opt('LDAP admin DN', 'cn=admin,%s' % self.config['ldapbasedn'])
            if 'ldappasswd' in invalids:
                self.config['ldappasswd'] = read_passwd('LDAP admin password')

            # Check parameters
            conn = ldap.initialize(self.config['ldapurl'])
            try:
                invalids = []
                conn.simple_bind_s(self.config['ldapadmindn'], self.config['ldappasswd'])
            except ldap.INVALID_CREDENTIALS, e:
                invalids += ['ldapbasedn', 'ldapadmindn', 'ldappasswd']
                log.error("Invalid credentials, check base DN, admin DN and password.")
                log.debug(str(e))
            except ldap.SERVER_DOWN, e:
                invalids += ['ldapurl']
                log.error("Incorrect server")
                log.debug(str(e))
            except ldap.UNWILLING_TO_PERFORM, e:
                invalids += ['ldappasswd']
                log.error("Empty password not supported")
                log.debug(str(e))
        log.info("Connection to LDAP succesfull.")

        # Check mmc schema is installed
        log.info("Check for MMC schema")
        (dn, schema) = ldap.schema.urlfetch(self.config['ldapurl'])
        if schema.get_obj(ldap.schema.ObjectClass, 'lmcUserObject') is None:
            log.error('MMC schema can not be found in LDAP directory.')
            log.error('Exiting...')
            sys.exit(1)

        # Populate base plugin conf file
        self.confs['plugins/base.ini'].set('ldap', 'ldapurl', self.config['ldapurl'])
        self.confs['plugins/base.ini'].set('ldap', 'rootname', self.config['ldapadmindn'])
        self.confs['plugins/base.ini'].set('ldap', 'password', self.config['ldappasswd'])
        
    def init_db(self):
        """ Create databases and associated schemas
        """
        invalid = True
        while invalid:
            # Get DB connection informations
            # Do not ask for dbhost, do not handle distant DB for the moment
            self.config['dbhost'] = 'localhost'
            self.config['dbadminuser'] = read_opt('Database admin user', 'root')
            self.config['dbadminpwd'] = read_passwd('Database admin password')

            # Create connection to DB and check it
            url = 'mysql://%s:%s@%s/mysql' % (self.config['dbadminuser'],
                                              self.config['dbadminpwd'],
                                              self.config['dbhost'])
            self.engine = sa.create_engine(url)
            try:
                conn = self.engine.connect()
                invalid = False
            except sa.exc.OperationalError, e:
                log.error(u"Impossible de se connecter à la base de données")
                log.debug(str(e))

        env = os.environ
        env['MYSQL_HOST'] = self.config['dbhost']
        env['MYSQL_USER'] = self.config['dbadminuser']
        env['MYSQL_PWD'] = self.config['dbadminpwd']
        for module in self.dbmodules:
            log.debug("Init database for module %s" % module)
            env['MYSQL_BASE'] = module
            binpath = os.path.join(self.sqldir, module, 'install.sh')
            ret = call(binpath, env=env)
            if ret<>0:
                log.error('Can not initialize database for module: %s' % module)

        # Get DB user and password for all modules
        log.info("Setup db credentials")
        self.config['dbuser'] = 'mmc'
        self.config['dbpwd'] = gen_password()

        conn = self.engine.connect()
        try:
            # Do not know how to check if user exists, then try and catch
            conn.execute('CREATE USER %s@%s', self.config['dbuser'], 'localhost')
            log.info('Creates user %s' % self.config['dbuser'])
        except sa.exc.OperationalError, e:
            if e.orig[0]==1396:
                # This error means 'user exists'
                log.debug('User already exists: %s' % self.config['dbuser'])
            else:
                raise e

        # Set password in DB
        log.info('Updating user password')
        conn.execute('SET PASSWORD FOR %s@%s = PASSWORD(%s)', self.config['dbuser'], 'localhost', self.config['dbpwd'])

        # Grant rights in DB
        for module in self.dbmodules:
            log.info('Grant rights on db %s' % module)
            # Put db name without sqlalchemy quoting: it was surrounded by `''
            conn.execute('GRANT ALL on `%s`.* to %%s@%%s' % module, self.config['dbuser'], 'localhost')

        conn.execute('FLUSH PRIVILEGES')
        conn.close()

        #
        # Set db user and password in conf files
        #
        
        # dyngroup db
        self.confs['plugins/dyngroup.ini'].set('database', 'dbhost', self.config['dbhost'])
        self.confs['plugins/dyngroup.ini'].set('database', 'dbuser', self.config['dbuser'])
        self.confs['plugins/dyngroup.ini'].set('database', 'dbpasswd', self.config['dbpwd'])

        # imaging db
        self.confs['plugins/imaging.ini'].set('database', 'dbhost', self.config['dbhost'])
        self.confs['plugins/imaging.ini'].set('database', 'dbuser', self.config['dbuser'])
        self.confs['plugins/imaging.ini'].set('database', 'dbpasswd', self.config['dbpwd'])

        # inventory db (plugin)
        self.confs['plugins/inventory.ini']\
            .set('inventory', 'dbhost', self.config['dbhost'])
        self.confs['plugins/inventory.ini']\
            .set('inventory', 'dbuser', self.config['dbuser'])
        self.confs['plugins/inventory.ini']\
            .set('inventory', 'dbpasswd', self.config['dbpwd'])

        # inventory db (server)
        self.confs['pulse2/inventory-server/inventory-server.ini']\
            .set('database', 'dbhost', self.config['dbhost'])
        self.confs['pulse2/inventory-server/inventory-server.ini']\
            .set('database', 'dbuser', self.config['dbuser'])
        self.confs['pulse2/inventory-server/inventory-server.ini']\
            .set('database', 'dbpasswd', self.config['dbpwd'])

        # msc db (plugin)
        self.confs['plugins/msc.ini'].set('msc', 'dbhost', self.config['dbhost'])
        self.confs['plugins/msc.ini'].set('msc', 'dbuser', self.config['dbuser'])
        self.confs['plugins/msc.ini'].set('msc', 'dbpasswd', self.config['dbpwd'])        
        
        # msc db (scheduler)
        self.confs['pulse2/scheduler/scheduler.ini']\
            .set('database', 'dbhost', self.config['dbhost'])
        self.confs['pulse2/scheduler/scheduler.ini']\
            .set('database', 'dbuser', self.config['dbuser'])
        self.confs['pulse2/scheduler/scheduler.ini']\
            .set('database', 'dbpasswd', self.config['dbpwd'])

        # pulse2
        self.confs['plugins/pulse2.ini'].set('database', 'dbhost', self.config['dbhost'])
        self.confs['plugins/pulse2.ini'].set('database', 'dbuser', self.config['dbuser'])
        self.confs['plugins/pulse2.ini'].set('database', 'dbpasswd', self.config['dbpwd'])

    def init_misc(self):
        # Choose glpi or inventory backend, and check config files coherency
        # TODO: ask for the user. For the moment, choose inventory
        self.confs['plugins/glpi.ini'].set('main', 'disable', 1)
        self.confs['plugins/inventory.ini'].set('main', 'disable', 0)
        self.confs['plugins/base.ini'].set('computers', 'method', 'inventory')
        
        # Create backup dir
        path = self.confs['plugins/base.ini'].get('backup-tools', 'destpath')
        if not os.path.isdir(path):
            log.info("Creating directory: %s" % path)
            os.makedirs(path)

    def commit(self):
        """ Write down all config files
        """
        for (path, conf) in self.confs.iteritems():
            conf.commit()

    def run(self):
        """ Run setup 
        """
        log.info("Run setup")
        self.init_db()
        self.init_ldap()
        self.init_misc()
        self.commit()

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-d", "--debug", action="store_true", dest="debug", default=False,
                      help="Print debug messages")
    parser.add_option("--pkgdatadir", action="store", dest="pkgdatadir", default='/usr/share/pulse2',
                      help="Path to pulse2 datadir (default: /usr/share/pulse2)")
    parser.add_option("--confdir", action="store", dest="confdir", default='/etc/mmc',
                      help="Path to pulse2 conf dir (default: /etc/mmc)")

    # Parse and analyse args
    (options, args) = parser.parse_args()
    if options.debug:
        level = logging.DEBUG
    else:
        level = logging.INFO

    # Init logger
    format = '%(levelname)-8s - %(message)s'
    logging.basicConfig(level=level, format=format)

    # Run the setup app
    app = SetupApp(datadir=options.pkgdatadir, confdir=options.confdir)
    app.run()
