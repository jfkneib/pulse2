#!/usr/bin/env python
# -*- coding: utf-8; -*-
#
# (c) 2011 Mandriva, http://www.mandriva.com/
#
# Author(s):
#   Jean Parpaillon <jparpaillon@mandriva.com>
#
# $Id$
#
# This file is part of Pulse 2, http://pulse2.mandriva.org
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2.  If not, see <http://www.gnu.org/licenses/>.
import os, sys
import readline, getpass
import string
from random import choice
from subprocess import call
from optparse import OptionParser
import sqlalchemy as sa
import logging

log = logging.getLogger('pulse2-setup')

def read_opt(prompt, default=None, passwd=False):
    if default is not None:
        prompt += ' (default=%s)' % default
    prompt = 'INPUT    - ' + prompt + ': '
    if passwd:
        s = getpass.getpass(prompt)
    else:
        s = raw_input(prompt)
    if len(s)==0 and default is not None:
        s = default
    return s

def gen_password(size=10):
    return ''.join([choice(string.letters + string.digits) for _ in range(size)])

class SetupApp(object):
    def __init__(self, datadir, confdir):
        self.config = {}

        # Check datadir contains sql snippets
        self.sqldir = os.path.join(datadir, 'sql')
        if not os.path.isdir(self.sqldir):
            log.error('Can not find SQL snippets in %s' % self.sqldir)

        # Get DB connection informations
        self.config['dbhost'] = read_opt('Database host', 'localhost')
        self.config['dbadminuser'] = read_opt('Database admin user', 'root')
        self.config['dbadminpwd'] = read_opt('Database admin password', default='', passwd=True)

        # Create connection to DB and check it
        url = 'mysql://%s:%s@%s/mysql?use_unicode=1&charset=utf8' % (self.config['dbadminuser'],
                                                                self.config['dbadminpwd'],
                                                                self.config['dbhost'])
        self.engine = sa.create_engine(url)
        try:
            conn = self.engine.connect()
        except sa.exc.OperationalError, e:
            log.error(u"Impossible de se connecter à la base de données")
            log.debug(str(e))
            exit(1)

        # Get db modules list
        self.dbmodules = [ m for m in os.listdir(self.sqldir) 
                           if os.path.isdir(os.path.join(self.sqldir, m)) ]

    def init_schemas(self):
        """ Create databases and associated schemas
        """
        env = os.environ
        env['MYSQL_HOST'] = self.config['dbhost']
        env['MYSQL_USER'] = self.config['dbadminuser']
        env['MYSQL_PWD'] = self.config['dbadminpwd']
        for module in self.dbmodules:
            log.debug("Init database for module %s" % module)
            env['MYSQL_BASE'] = module
            binpath = os.path.join(self.sqldir, module, 'install.sh')
            ret = call(binpath, env=env)
            if ret<>0:
                log.error('Can not initialize database for module: %s' % module)

    def init_config(self):
        # Set DB user and password for all modules
        self.config['dbuser'] = read_opt('Database Pulse2 user', 'mmc')
        self.config['dbpwd'] = read_opt('Database Pulse2 password', passwd=True, default='<generated>')
        if self.config['dbpwd']=='<generated>':
            self.config['dbpwd'] = gen_password()
            log.debug('Generated password: %s' % self.config['dbpwd'])

        conn = self.engine.connect()
        try:
            # Do not know how to check if user exists, then try and catch
            conn.execute('CREATE USER %s@%s', self.config['dbuser'], 'localhost')
            log.info('Creates user %s' % self.config['dbuser'])
        except sa.exc.OperationalError, e:
            if e.orig[0]==1396:
                # This error means 'user exists'
                log.debug('User already exists: %s' % self.config['dbuser'])
            else:
                raise e

        # Set password
        log.info('Updating user password')
        conn.execute('SET PASSWORD FOR %s@%s = PASSWORD(%s)', self.config['dbuser'], 'localhost', self.config['dbpwd'])

        # Grant rights
        for module in self.dbmodules:
            log.info('Grant rights on db %s' % module)
            conn.execute('GRANT ALL on `%s`.* to %s@%s', module, self.config['dbuser'], 'localhost')

        conn.execute('FLUSH PRIVILEGES')
        conn.close()

    def run(self):
        """ Run setup 
        """
        log.info("Run setup")
        #self.init_schemas()
        self.init_config()

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-d", "--debug", action="store_true", dest="debug", default=False,
                      help="Print debug messages")
    parser.add_option("--pkgdatadir", action="store", dest="pkgdatadir", default='/usr/share/pulse2',
                      help="Path to pulse2 datadir (default: /usr/share/pulse2)")
    parser.add_option("--confdir", action="store", dest="confdir", default='/etc/mmc',
                      help="Path to pulse2 conf dir (default: /etc/mmc)")

    # Parse and analyse args
    (options, args) = parser.parse_args()
    if options.debug:
        level = logging.DEBUG
    else:
        level = logging.INFO

    # Init logger
    format = '%(levelname)-8s - %(message)s'
    logging.basicConfig(level=level, format=format)

    # Run the setup app
    app = SetupApp(datadir=options.pkgdatadir, confdir=options.confdir)
    app.run()
