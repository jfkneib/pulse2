#!/usr/bin/python
#
# (c) 2008 Mandriva, http://www.mandriva.com/
#
# $Id$
#
# This file is part of Pulse 2, http://pulse2.mandriva.org
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

# -*- coding: utf-8; -*-

import os
import os.path
import sys
import getopt
import logging
import logging.config
from pulse2.inventoryserver.server import InventoryGetService
from pulse2.inventoryserver.config import Pulse2OcsserverConfigParser

VERSION = "1.2.2"
REVISION = int("$Rev$".split(':')[1].strip(' $'))

def getVersion():  return VERSION
def getRevision(): return REVISION

def running(daemonize, inifile):
    config = Pulse2OcsserverConfigParser()
    config.setup(inifile)

    # Set umask and effective UID and GID values
    os.umask(config.umask)
    os.setegid(config.daemon_group)
    os.seteuid(config.daemon_user)

    # Create log dir if it doesn't exist
    os.system('mkdir -p /var/log/mmc')
                                    
    logging.config.fileConfig(inifile)
    logger = logging.getLogger()

    # When starting, we log to stderr too
    hdlr2 = logging.StreamHandler()
    logger.addHandler(hdlr2)

    logger.debug("Logger loaded")
    logger.info("Inventory server version('%s') build('%s')" % (str(getVersion()), str(getRevision())))

    if InventoryGetService().initialise(config):
        if daemonize:
            daemon(config)
            # No more log to stderr
            logger.removeHandler(hdlr2)
        InventoryGetService().run()
        ret = 0
    else:
        ret = 1
    return ret

def daemon(config):
    """
    daemonize pulse2-inventory-server

    @param pidfile: path to pid file
    @type pidfile: str
    """
    pidfile = config.pidfile
        
    # Test if mmcagent has been already launched in daemon mode
    if os.path.isfile(pidfile):
        print pidfile+" pid already exist. Maybe pulse2-inventory-server is already running\n"
        print "use /etc/init.d script to stop and relaunch it"
        sys.exit(0)
        
    # do the UNIX double-fork magic, see Stevens' "Advanced
    # Programming in the UNIX Environment" for details (ISBN 0201563177)
    try:
        pid = os.fork()
        if pid > 0:
            # exit first parent
            sys.exit(0)
    except OSError, e:
        print >>sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, e.strerror)
        sys.exit(1)
        
    # decouple from parent environment
    os.close(sys.stdin.fileno())
    os.close(sys.stdout.fileno())
    os.close(sys.stderr.fileno())
    os.chdir("/")
    os.setsid()
    
    # do second fork
    try:
        pid = os.fork()
        if pid > 0:
            # exit from second parent, print eventual PID before
            print "Daemon PID %d" % pid
            os.seteuid(0)
            os.setegid(0)
            os.system("echo " + str(pid) + " > " + pidfile)
            sys.exit(0)
    except OSError, e:
        print >>sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror)
        sys.exit(1)



if __name__ == "__main__":
    inifile = "/etc/mmc/pulse2/inventory-server/inventory-server.ini"
    try:
        opts, suivarg = getopt.getopt(sys.argv[1:], "f:d")
    except getopt.GetoptError:
        sys.exit(2)
    daemonize = True
    for option, argument in opts:
        if option == "-f":
            inifile = argument
        elif option == "-d":
            daemonize = False

    if not os.path.exists(inifile):
        print "File '%s' does not exist." % inifile
        sys.exit(3)
 
    # Start the daemon main loop
    sys.exit(running(daemonize, inifile))


