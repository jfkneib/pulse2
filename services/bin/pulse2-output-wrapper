#!/usr/bin/python
# -*- coding: utf-8; -*-
#
# (c) 2007-2008 Mandriva, http://www.mandriva.com/
#
# $Id$
#
# This file is part of Pulse 2, http://pulse2.mandriva.org
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

""" A (not so) simple command line wrapper.
"""

"""
This tool expect a command line, run it, output stdout and stderr in a
demuxable-way, and give-up with the command line exit code
For exemple, "ls /mnt /nothing" whould give you:
***************************************
ls: /nothing: No such file or directory
/mnt:
nfs
***************************************
and "pulse2_output_wrapper 0 ls /mnt /nothing" will give you:
***************************************
1199893195.42 C: ls·/mnt·/nothing
1199893195.46 E: ls: /nothing: No such file or directory
1199893195.46 E:
1199893195.46 O: /mnt:
1199893195.46 O: nfs
1199893195.46 O:
1199893195.46 X: 1
***************************************
Output lines are formatted like this:
<timestamp><space><tag><column><space><output line>
With <tag>:
  W: the wrapper line, using '·' as separator
  C: the command line, using '·' as separator
  O: something on stdout
  E: something on stderr
  X: the exit code

Lines are always parsed to be fully utf-8 compliant
"""
import twisted.internet.protocol
import twisted.internet.reactor
import twisted.python.usage

import time
import sys
import signal
SEPARATOR = '·'

class ExitCode(object): # the only way I found to exit with the right exit code
    value = 0

    def __new__(type):
        if not '_the_instance' in type.__dict__:
            type._the_instance = object.__new__(type)
        return type._the_instance
    def set(self, value):
        self.value = value
    def get(self):
        return self.value

class Options(twisted.python.usage.Options):

    exec_string = []
    thru_string = []

    optParameters = [
        ["exec", None, None, "The command to be executed, arg separator is '%s' " % SEPARATOR],
        ["thru", None, None, "The command to wrap the execution, arg separator is '%s', must respect the SSH syntax" % SEPARATOR],
        ["max-log-size", None, None, "Keeps the only first bytes of the output"],
        ["max-exec-time", None, None, "Kill command above this number of seconds"],
        ]

    optFlags = [
        ["no-wrap", None, "Do not wrap output"],
        ["only-stdout", None, "Only write stdout on the output"],
        ["remove-empty-lines", None, "Do not write empty lines"],
        ]
    def __init__(self):
        twisted.python.usage.Options.__init__(self)
    def opt_version(self):
        print "FIXME: put rev here";
    def postOptions(self):
        if not self['exec']:
            print '%s: missing string to execute: --help for usage details.' % (sys.argv[0])
            sys.exit(2)
        self.exec_string = self['exec'].split(SEPARATOR)
        if self['thru']:
            self.thru_string = self['thru'].split(SEPARATOR)
        else:
            self.thru_string = None
        self.exec_string = self['exec'].split(SEPARATOR)

class shOutputWrapper(twisted.internet.protocol.ProcessProtocol):
    """ A twisted.internet.protocol.ProcessProtocol override to handle on-the-fly encoding transcription
    """

    def __init__(self, max_log_size):
        self.exitcode = 0
        self.max_log_size = None
        if max_log_size:
            self.max_log_size = int(max_log_size)
        self.size = 0
        self.end = False

    def truncate_to_max_log_size(self, line):
        if not self.max_log_size: # no trunc
            self.size += len(line)
            return line
        if self.size == self.max_log_size: # limit exhausted
            return ''
        count = self.max_log_size-self.size
        self.size += count
        return line[0:count]

    def outReceived(self, data):
        """ Format stdout
        """
        if self.end:
            return True
        for line in data.split('\n'):
            format(self.truncate_to_max_log_size(line), 'O')
        return True

    def errReceived(self, data):
        """ Format stderr
        """
        if self.end:
            return True
        for line in data.split('\n'):
            format(self.truncate_to_max_log_size(line), 'E')
        return True

    def processEnded(self, reason):
        """ Fired when process has finished
        """
        if reason.value.exitCode != None:
            exitcode = int(reason.value.exitCode)
        else:
            exitcode = int(reason.value.signal) + 128

        format(str(exitcode), 'X')
        ExitCode().set(exitcode)
        twisted.internet.reactor.stop()

def format(line, tag):
    """ Format a line as expected (see upper)
    * attempt to guess encoding (currently try 'windows-1252', 'utf-8',
     'cp850', 'latin-1' and fallback to ascii)
    * convert to utf-8
    * format line
    """

    if config["only-stdout"] and not tag == 'O':
        return
    if config["remove-empty-lines"] and not len(line):
        return
    for codec in ['utf-8', 'cp850', 'latin-1', 'windows-1252']:
        try:
            uline = unicode(line, codec)
            break
        except UnicodeDecodeError:
            continue
    else:
        uline = unicode(line, 'ascii', 'replace')
    try:
        line = uline.encode('utf-8')
    except:
        line = uline.encode('utf-8', 'replace')

    if not config["no-wrap"]:
        print "%.2f %s: %s" % (time.time(), tag, line)
    else:
        print line

def runCommand(config):
    process = shOutputWrapper(config['max-log-size'])
    if config.thru_string:
        format(SEPARATOR.join(config.thru_string), 'T')
        format(SEPARATOR.join(config.exec_string), 'C')
        handler = twisted.internet.reactor.spawnProcess(process, config.thru_string[0], config.thru_string + config.exec_string)
    else:
        format(SEPARATOR.join(config.exec_string), 'C')
        handler = twisted.internet.reactor.spawnProcess(process, config.exec_string[0], config.exec_string)
    if config['max-exec-time']:
        twisted.internet.reactor.callLater(int(config['max-exec-time']), handler.signalProcess, signal.SIGKILL) # max_exec_time handlinng


# Parse command line
config = Options()
try:
    config.parseOptions()
except twisted.python.usage.UsageError, errortext:
    print '%s: %s' % (sys.argv[0], errortext)
    print '%s: Try --help for usage details.' % (sys.argv[0])
    sys.exit(0)


twisted.internet.reactor.callLater(0, runCommand, config) # delayed start to give the reactor a chance to install its SIGCHILD handlers
twisted.internet.reactor.run()
sys.exit(ExitCode().get())
