#!/usr/bin/python
# -*- coding: utf-8; -*-

import os
import os.path
import sys
import getopt
import logging
import logging.config
import twisted
from pulse2.package_server.server import P2PServerService
from pulse2.package_server.description import Description
from pulse2.package_server.config import P2PServerCP, config_addons
from pulse2.package_server.common import Common
from pulse2.package_server.mirror_api import MirrorApi
from pulse2.package_server.mirror import Mirror
from pulse2.package_server.package_api_get import PackageApiGet
from pulse2.package_server.package_api_put import PackageApiPut
from pulse2.package_server.user_package_api import UserPackageApi

def running(inifile, deamonize):
    
    P2PServerCP().setup(inifile)

    # File will be rw for root user only
    os.umask(0077)

    # Create log dir if it doesn't exist
    os.system('mkdir -p /var/log/mmc')
                                    
    logging.config.fileConfig(inifile)
    logger = logging.getLogger()
    logger.debug("Logger loaded")

    # When starting mmcServer, we log to stderr too
    hdlr2 = logging.StreamHandler()
    logger.addHandler(hdlr2)
        
    config = P2PServerCP()
    config_addons(config)

    Common().init(config)
    
    port = int(config.port)
            
    desc = Description('/')
    server = P2PServerService(config, desc)
    services = []
    if len(config.mirrors) > 0:
        for mirror_params in config.mirrors:
            m_api = Mirror(mirror_params['mount_point'], mirror_params['mount_point'])
            server.register(m_api, mirror_params['mount_point'])
            services.append({'type':'mirror', 'mp':mirror_params['mount_point'], 'server':config.bind, 'port':config.port, 'proto':config.proto, 'src':mirror_params['src']})
            # TODO : add the file handler
            #{'type'=>'mirror_files', 'mp'=>"#{mirror_params['mount_point']}_files", 'server'=>@conf['server'], 'port'=>@conf['port'], 'proto'=>proto, 'src'=>mirror_params['src']}

    if len(config.package_api_get) > 0:
        for mirror_params in config.package_api_get:
            p_api = PackageApiGet(mirror_params['mount_point'], mirror_params['mount_point'])
            server.register(p_api, mirror_params['mount_point'])
            services.append({'type':'package_api_get', 'mp':mirror_params['mount_point'], 'server':config.bind, 'port':config.port, 'proto':config.proto, 'src':mirror_params['src']})

    if len(config.package_api_put) > 0:
        for mirror_params in config.package_api_put:
            p_api = PackageApiPut(mirror_params['mount_point'], mirror_params['mount_point'])
            server.register(p_api, mirror_params['mount_point'])
            services.append({'type':'package_api_put', 'mp':mirror_params['mount_point'], 'server':config.bind, 'port':config.port, 'proto':config.proto, 'src':mirror_params['src']})
 
    if config.user_package_api.has_key('mount_point'):
        mirror = UserPackageApi(services, config.user_package_api['mount_point'])
        server.register(mirror, config.user_package_api['mount_point'])
        
    if config.mirror_api.has_key('mount_point'):
        mirror = MirrorApi(services, config.mirror_api['mount_point'])
        server.register(mirror, config.mirror_api['mount_point'])
    else:
        self.logger.warn('package server initialized without mirror api')
 
    Common().setDesc(services)
    try:
        if config.enablessl:
            if not os.path.isfile(config.privkey):
                logger.error('can\'t read SSL key "%s"' % (config.privkey))
                return 1
            if not os.path.isfile(config.certfile):
                logger.error('can\'t read SSL certificate "%s"' % (config.certfile))
                return 1
            sslContext = twisted.internet.ssl.DefaultOpenSSLContextFactory(config.privkey, config.certfile)
            twisted.internet.reactor.listenSSL(
                port,
                twisted.web.server.Site(server),
                interface = config.bind,
                contextFactory = config.sslContext
                )
            logger.info('activating SSL mode')
        else:
            twisted.internet.reactor.listenTCP(
                port,
                twisted.web.server.Site(server),
                interface = config.bind
                )
    except Exception, e:
        logger.error('can\'t bind to %s:%d' % (config.bind, port))
        logger.error(e)
        return 1

    logger.info('package server listening on %s:%d' % (config.bind, port))

    # Become a daemon
    if daemonize: daemon(config)

    twisted.internet.reactor.run()
    return 0
                                                                                
def daemon(config):
    """
    daemonize pulse2-package-server

    @param pidfile: path to pid file
    @type pidfile: str
    """
    pidfile = config.pidfile
        
    # Test if mmcagent has been already launched in daemon mode
    if os.path.isfile(pidfile):
        print pidfile+" pid already exist. Maybe pulse2-package-server is already running\n"
        print "use /etc/init.d script to stop and relaunch it"
        sys.exit(0)
        
    # do the UNIX double-fork magic, see Stevens' "Advanced
    # Programming in the UNIX Environment" for details (ISBN 0201563177)
    try:
        pid = os.fork()
        if pid > 0:
            # exit first parent
            sys.exit(0)
    except OSError, e:
        print >>sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, e.strerror)
        sys.exit(1)
        
    # decouple from parent environment
    os.close(sys.stdin.fileno())
    os.close(sys.stdout.fileno())
    os.close(sys.stderr.fileno())
    os.chdir("/")
    os.setsid()
    
    # do second fork
    try:
        pid = os.fork()
        if pid > 0:
            # exit from second parent, print eventual PID before
            print "Daemon PID %d" % pid
            os.system("echo " + str(pid) + " > " + pidfile)
            sys.exit(0)
    except OSError, e:
        print >>sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror)
        sys.exit(1)

if __name__ == "__main__":
    inifile = "/etc/mmc/pulse2/pserver/package-server.ini"
    try:
        opts, suivarg = getopt.getopt(sys.argv[1:], "f:d")
    except getopt.GetoptError:
        sys.exit(2)
    daemonize = True
    for option, argument in opts:
        if option == "-f":
            inifile = argument
        elif option == "-d":
            daemonize = False

    if not os.path.exists(inifile):
        print "File '%s' does not exist." % inifile
        sys.exit(3)
 
    # Start the daemon main loop
    sys.exit(running(inifile, daemonize))


