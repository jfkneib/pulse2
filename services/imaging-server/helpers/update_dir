#!/usr/bin/perl -w
#
# (c) 2003-2007 Linbox, http://www.linbox.com/
# (c) 2008-2009 Mandriva, http://www.mandriva.com/
#
# $Id$
#
# This file is part of Pulse 2, http://pulse2.mandriva.org
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2.  If not, see <http://www.gnu.org/licenses/>.

# consts
$BASEDIR = "/var/lib/pulse2/imaging";

use lib "/usr/lib/pulse2/imaging/helpers";
require "lrs-legacy.pl";

$iam = `basename $0`;
chomp($iam);

#//////////////////////////////////////////////////////////////////////////////

# badExit($message,[...])
#
sub badExit {
    my $msg = join( " ", @_ );
    print STDERR "$iam: $msg\n";
    exit(1);
}

# loadConf($file,\%conf)
#
sub loadConf {
    open( F, $_[0] ) || return 0;
    while (<F>) {
        s/#.*$//g;
        if (   /([A-z0-9_\.]+)\s*=\s*"(.*)"/
            || /([A-z0-9_\.]+)\s*=\s*'(.*)'/
            || /([A-z0-9_\.]+)\s*=\s*(.*)/ )
        {
            $_[1]->{$1} = $2;
        }
    }
    close(F);
    return 1;
}

# setHeader($file, $img)
# Add a new section in $file (type header.lst), set visu=yes, and set
# image $img.  Return 1 if OK, or 0 if not.
#
sub setHeader {
    my ( $file, $img ) = @_;
    my ( %hdr, $menu );

    hdrLoad( $file, \%hdr ) or return 0;

    $menu = hdrUniqueName( \%hdr );
    hdrAddMenu( \%hdr, $menu ) or return 0;
    hdrSetVal( \%hdr, $menu, "def",     "no" );
    hdrSetVal( \%hdr, $menu, "visu",    "yes" );
    hdrSetVal( \%hdr, $menu, "image",   $img );
    hdrSetVal( \%hdr, $menu, "include", "$img/conf.txt" );

    hdrSave( $file, \%hdr ) or return 0;

    1;
}

#//////////////////////////////////////////////////////////////////////////////

badExit("'$BASEDIR': Pulse 2 basedir not found") if ( not -d $BASEDIR );

unshift @INC, "$BASEDIR/bin";

$opt_autoselect = 0;    # see below, de-activated by default

my $macaddr     = $ARGV[0] || badExit("too few arguments");
my $opt_copynum = $ARGV[1] || '';

my $hostdir;
my $num = 0;
my $bidon;
my $menu;
my $newimg;
my $lmacaddr;

$lmacaddr = $macaddr;
$lmacaddr =~ s/(..)(..)(..)(..)(..)(..)/$1:$2:$3:$4:$5:$6/;

if ( $opt_copynum eq 'C' ) {

    $hostdir = "$BASEDIR/images/$macaddr";
    $num     = 0;

    if ( -f "$hostdir/COPYNUM" ) {
        $num = `cat "$hostdir/COPYNUM"`;
        chomp($num);
    }

    $newimg = "Local-$num";
    $bidon  = `mkdir -p "$hostdir/$newimg"; chown 65534 "$hostdir/$newimg"`;
    $num += 1;

    open( HOST, ">$hostdir/hostname" ) or badExit("open: $!");
    print HOST "TODO";    # fixme : record the original client hostname
    close(HOST);

    open( NUM, ">$hostdir/COPYNUM" ) or badExit("open: $!");
    print NUM $num;
    close(NUM);

    if ( !-f "$hostdir/$newimg/conf.txt" ) {
        open( CONF, ">$hostdir/$newimg/conf.txt" ) or badExit("open: $!");
        print CONF "title Local backup ($newimg)\n";
        print CONF "desc Currently backing up. Please wait...\n";
        close(CONF);
    }
    if ($opt_autoselect) {
        setHeader( "$hostdir/header.lst", $newimg )
          or badExit("setHeader");
    }
}
else {
    $num = 0;
    if ( -f "$BASEDIR/imgbase/BASENUM" ) {
        $num = `cat "$BASEDIR/imgbase/BASENUM"`;
        chomp($num);
    }

    $newimg = "Base-$num";
    $bidon =
`mkdir -p "$BASEDIR/imgbase/$newimg"; chown 65534 "$BASEDIR/imgbase/$newimg"`;
    $num += 1;

    open( NUM, ">$BASEDIR/imgbase/BASENUM" ) or badExit("open: $!");
    print NUM $num;
    close(NUM);

    open( HOST, ">$BASEDIR/imgbase/hostname" ) or badExit("open: $!");
    print HOST "TODO";    # fixme : record the original client hostname
    close(HOST);

    # Create temporarily conf.txt:
    if ( !-f "$BASEDIR/imgbase/$newimg/conf.txt" ) {
        open( CONF, ">$BASEDIR/imgbase/$newimg/conf.txt" )
          or badExit("open: $!");
        print CONF "title Base backup ($newimg)\n";
        print CONF "desc Currently backing up. Please wait...\n";
        close(CONF);
    }

}

# to be ported to pulse2
updateEntry( $BASEDIR, $macaddr ) or badExit( lbsGetError() );

