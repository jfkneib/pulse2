#!/usr/bin/perl -w
#
# (c) 2003-2007 Linbox, http://www.linbox.com/
# (c) 2008-2009 Mandriva, http://www.mandriva.com/
#
# $Id$
#
# This file is part of Pulse 2, http://pulse2.mandriva.org
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2.  If not, see <http://www.gnu.org/licenses/>.

# Global imports
use File::Copy;
use strict;

# Uses legacy LRS stuff
use lib "/usr/lib/pulse2/imaging/helpers";
require "lrs-legacy.pl";

# Global consts
my $BASEDIR             = '/var/lib/pulse2/imaging';
my $ETHERFILE           = "$BASEDIR/computers/UUIDs.txt";
my %ETHER               = ();
my $LOGFILE             = '/var/log/mmc/pulse2-imaging-server.log';
my $STORAGE_CREATE_PATH = '/usr/lib/pulse2/imaging/helpers/create_config';

my $ip = 'Dynamic';

sub mylog {
    my $level = shift;
    my $msg   = shift;

    my $buffer = '';
    my $date   = '';

    # gather date
    open CFG, "date '+%Y-%m-%d %H:%M:%S,000' |";
    chomp( $date = <CFG> );
    close(CFG);

    $buffer .= $date;
    $buffer .= " ";
    $buffer .= $level;
    $buffer .= " ";
    $buffer .= "check_add_host";
    $buffer .= " ";
    $buffer .= $msg;
    $buffer .= "\n";

    open LOG, ">> $LOGFILE";
    print LOG $buffer;
    close LOG;
}

sub check_password {

    # always return true
    return 1;
}

# MAIN ////////////////////////////////////////////////////////////////////////

( $#ARGV != 2 )
  and mylog( "ERROR", "Usage: check_add_host MAC HOSTNAME PASSWORD" )
  and print("Usage: check_add_host MAC HOSTNAME PASSWORD\n")
  and exit;

my $mac      = uc( $ARGV[0] );
my $hostname = $ARGV[1];
my $password = $ARGV[2];

if ( defined $ARGV[3] ) {
    $ip = $ARGV[3];
}

# checks if file exists, attempt to create it if not, die if unsuccedeed
stat $ETHERFILE
  or open FILE, '>>', $ETHERFILE
  and close FILE
  and mylog( "WARN", "Creating $ETHERFILE" );

# eventually open file, parse it, close it
open FILE, $ETHERFILE or mylog( "ERROR", "Can't open $ETHERFILE" ) and die;
while (<FILE>) {
    my $key;
    my $val;
    chomp;
    next if /^;/;       # avoid lines starting by ';'
    next if /^#/;       # avoid lines starting by '#'
    next if /^\s*$/;    # avoid empty lines

    ( $key, $val ) = split ' ', $_,
      2;                # split line in two components : MAC, and "IP HOSTNAME"

    $ETHER{$key} = $val;
}
close(FILE);

$_ = $mac;
s/\://g;
my $smac = $_;

mylog( "INFO", "Trying to add $mac as $hostname" );

# sanity checks
$mac eq "?"
  and mylog( "ERROR", "MAC not retrieved in the process (ARP was flushed ?)" )
  and exit;
exists $ETHER{$mac} and mylog( "ERROR", "MAC already used" ) and exit;
check_password() or mylog( "ERROR", "Password checking failed" ) and exit;

# create client folder
my $command = "$STORAGE_CREATE_PATH $smac $ip $hostname";
mylog( "DEBUG", "Running $command" );
system($command)
  or mylog( "ERROR", "Cannot create storage for client" )
  and exit;
mylog( "INFO", "Created storage for client" );

# update etc/ether
copy( $ETHERFILE, "$ETHERFILE.old" )
  or mylog( "ERROR", "Cannot backup ether" )
  and exit;

open FILE, ">" . $ETHERFILE
  or mylog( "ERROR", "Cannot create ether. $!" )
  and exit;
print FILE "# Automatically generated, do not edit\n\n";
foreach my $i ( keys %ETHER ) { print FILE "$i $\%ETHER{$i}\n"; }
print FILE "$mac $ip $hostname\n";
close(FILE);

$ETHER{$mac} = "$ip $hostname";

# update the hostname file
open( HOST, ">$BASEDIR/images/" . $smac . "/hostname" );
print HOST $hostname;
close(HOST);

mylog( "INFO", "IP $ip added successfully to 'ether' file" );
exit(0);
