#!/usr/bin/perl -w
#
# Syncing imgskel/ directory contents with imgbase/ .
#
# $Id: skelsync 2307 2005-06-13 09:40:44Z root $
#
# Linbox Rescue Server
# Copyright (C) 2005  Linbox FAS
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

$lbsconf = "/etc/lbs.conf";
$iam     = `basename $0`;
chomp($iam);

#//////////////////////////////////////////////////////////////////////////////

# logMe($message,[...])
#
sub logMe {
    my $msg = join ( " ", @_ );
    print STDERR "$iam: $msg\n";
}

# badExit($message,[...])
#
sub badExit {
    logMe( "ERROR:", @_ );
    exit(1);
}

sub usage {
    print <<EOF;
Syncing imgskel directory contents
Usage: $iam [-v|--verbose] [-s|--sync] [--help]
EOF
}

# loadConf($file,\%conf)
#
sub loadConf {
    open( F, $_[0] ) || return 0;
    while (<F>) {
        s/#.*$//g;
        if ( /([A-z0-9_\.]+)\s*=\s*"(.*)"/
            || /([A-z0-9_\.]+)\s*=\s*'(.*)'/
            || /([A-z0-9_\.]+)\s*=\s*(.*)/ )
        {
            $_[1]->{$1} = $2;
        }
    }
    close(F);
    return 1;
}

# setHeader($file, $img)
# Add a new section in $file (type header.lst), set visu=yes, and set
# image $img.  Return 1 if OK, or 0 if not.
#
#sub setHeader
#{
#my ($file,$img) = @_ ;
#my (%hdr,$menu) ;
#
# hdrLoad($file,\%hdr) or return 0 ;
#	
#	$menu = hdrUniqueName(\%hdr) ;
#	hdrAddMenu(\%hdr,$menu) or return 0 ;
#	hdrSetVal(\%hdr, $menu, "def", "no") ;
#	hdrSetVal(\%hdr, $menu, "visu", "yes") ;
#	hdrSetVal(\%hdr, $menu, "image", $img) ;
#	hdrSetVal(\%hdr, $menu, "include", "$img/conf.txt") ;
#		
# hdrSave($file, \%hdr) or return 0 ;
#
#1;
#}

# doSkelSync($basedir,$verbose_flag)
#
sub doSkelSync {
    my ( $basedir, $verbose ) = @_;

    my $imgbase = "$basedir/imgbase";
    my $imgskel = "$basedir/imgskel";
    my $header  = "$imgskel/header.lst";

    my ( @ls_base, @ls_skel, @ls_obsolete, @ls_toadd );
    my ( %hdr, $m );
    my $i;

    @ls_base = readSubDirs($imgbase);
    if ( not scalar @ls_base ) {
        lbsError( "skelsync", "IMG_EMPTYBASE", $imgbase );
        logMe( "Warning:", lbsGetError() );
    }

    @ls_skel = skelReadBaseLinks($basedir);
    lbsErrorFlag() and lbsDieError();

    # Found in imgskel, but not in imgbase:
    @ls_obsolete = listExclude( \@ls_skel, \@ls_base );

    if ( scalar @ls_obsolete ) {
        foreach $i (@ls_obsolete) {
            skelDeleteBaseLink( $basedir, $i );
            logMe("Deleting $i") if ($verbose);
        }
    }

    # Found in imgbase, but not in imgskel:
    @ls_toadd = listExclude( \@ls_base, \@ls_skel );

    if ( scalar @ls_toadd ) {
        foreach $i (@ls_toadd) {
            skelAddBaseLink( $basedir, $i );
            logMe("Adding $i") if ($verbose);
        }
    }

    #
    hdrLoad( $header, \%hdr );
    foreach $i ( hdrGetMenuNames( \%hdr ) ) {
        my $v = hdrGetVal( \%hdr, $i, "image" );
        if ( grep ( /^$v$/, @ls_base ) == 0 ) {
            hdrDeleteSection( \%hdr, $i );
            logMe("Delete old section [$i] $v") if ($verbose);
        }
    }
    hdrSave( $header, \%hdr );

    #	print "base -- @ls_base","\n" ;
    #	print "skel -- @ls_skel","\n" ;
    #	print "obso -- @ls_obsolete","\n" ;
    #	print "toad -- @ls_toadd","\n" ;

    logMe("Sync done") if ($verbose);

    1;
}

#//////////////////////////////////////////////////////////////////////////////
# M A I N
#//////////////////////////////////////////////////////////////////////////////

%opts  = ();
%hconf = ();
loadConf( $lbsconf, \%hconf );

my $basedir = $hconf{'basedir'};

badExit("'$basedir': LBS basedir not found") if ( not -d $basedir );

unshift @INC, "$basedir/bin";
require "lbs-lib.pl";

if ( not scalar @ARGV ) {
    logMe("Too few arguments. See option '--help' for online help");
    exit(1);
}

# Options flags:
%opts = (
    "sync"    => 0,
    "verbose" => 0,
    "help"    => 0,
);

while (@ARGV) {
    my $arg = $ARGV[0];

    if ( $arg eq "--sync" or $arg eq "-s" ) {
        $opts{"sync"} = 1;
    }
    elsif ( $arg eq "-v" or $arg eq "--verbose" ) {
        $opts{"verbose"} = 1;
    }
    elsif ( $arg eq "--help" ) {
        $opts{"help"} = 1;
        usage();
        exit(1);
    }
    else {
        last;
    }

    shift (@ARGV);
}

doSkelSync( $basedir, $opts{"verbose"} ) if ( $opts{"sync"} == 1 );

