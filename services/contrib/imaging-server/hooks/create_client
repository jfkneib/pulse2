#!/usr/bin/python
# -*- coding: utf-8; -*-
#
# (c) 2010 Mandriva, http://www.mandriva.com
#
# $Id$
#
# This file is part of Pulse 2, http://pulse2.mandriva.org
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2. If not, see <http://www.gnu.org/licenses/>.
#

"""
    This hook is called when a client asks to be declared.

    For the curious mind, if correspond to the following GRUB keywords:
    - identify (name and password given by the user)
    - identifyauto (server is left alone) : deprecated, LRS stuff
"""
import sys
import twisted.internet.reactor
import logging
import logging.config
from mmc.site import mmcconfdir
import pulse2.apis.clients.imaging
import pulse2.utils
import pulse2.imaging_server.config

CONFIG_FILE = mmcconfdir + '/pulse2/imaging-server/imaging-server.ini' #: config file location

# default error code
ERROR_OK = 0        #: no error
ERROR_SERVER = 1    #: error server-side
ERROR_CLIENT = 2    #: error client-side (here)
ERROR_UNKNOWN = 3   #: unknow (and default) error
exitcode = ERROR_UNKNOWN #: global error code, used when exiting

logger = logging.getLogger()

########################################################################
#         NOTHING SHOULD BE ALTERED ABOVE THIS LINE                    #
########################################################################



class RegisterByInventory :
    """
    Registering a new computer by sending the inventory. 
    
    Used on GLPI mode where the method computerRegister 
    is not accessible (GLPI backend is read-only).
    """
    # When GLPI mode is a special case, all imports 
    # are encapsulated in this class to avoid 
    # the unusuals imports when we are using
    # only Pulse on stand-allone mode.

    def __init__(self, config):
        """
        @param config: imaging server config container
        @type config: ImagingConfig
        """
        if config.invserver_enablessl :
            protocol = "https"
        else :
            protocol = "http"

        self._url = "%s://%s:%s/" % (protocol, config.invserver_host, config.invserver_port)


    def send(self, hostname, mac):
        """
        Send the minimal inventory to URL of inventory server.

        @param hostname: computer's hostname
        @type hostname: str
        @param mac: MAC address on standard format xx:xx:xx:xx:xx:xx
        @type mac: str

        """
        from pulse2.imaging.bootinventory import BootInventory
        from twisted.web.client import Agent
 
        boot_inv = BootInventory()
        boot_inv.macaddr_info = mac

        self.inventory = boot_inv.dumpOCS(hostname, "root")

        logging.getLogger().debug("Registering the computer '%s'by inventory" % hostname)

        agent = Agent(twisted.internet.reactor)

        # POST the inventory to the inventory server
        defer = agent.request('POST', self._url, self._headers, self._content)
        defer.addCallbacks(self._callBack, self._errorBack)

        return defer

    @property
    def _headers(self):
        """
        @return: headers for POST method
        @rtype: str
        """
        from twisted.web.http_headers import Headers
        return Headers({'Content-Type': ['application/x-www-form-urlencoded'],
                        'Content-Length': [str(len(self.inventory))],
                        'User-Agent': ['Pulse2 Imaging server inventory register']
                        })
 
    @property
    def _content(self):
        """
        @return: content to post
        @rtype: str
        """
        from zope.interface import implements
        from twisted.web.iweb import IBodyProducer
        from twisted.internet.defer import succeed

        class StringProducer(object):
            implements(IBodyProducer)

            def __init__(self, string):
                self.body = string
                self.length = len(self.body)

            def startProducing(self, consumer):
                consumer.write(self.body)
                return succeed(None)

        return StringProducer(self.inventory)


    def _errorBack (self, reason):

        logging.getLogger().debug('Error while sending the register inventory : %s' % str(reason))
        return endBack()

    def _callBack(self, result):

        global exitcode

        if result.code != 200:
            logging.getLogger().error("HOOK %s : Error sending the inventory to the inventory server" % sys.argv[0])
            logging.getLogger().error(result.phrase)
            exitcode = ERROR_SERVER
        else:
            logging.getLogger().debug("%s : Inventory sent to the inventory server" % sys.argv[0])

            if result and result != None:
                exitcode = ERROR_OK
                logging.getLogger().info('HOOK %s : SUCCESS (inventory OK)' % sys.argv[0])
            else:
                exitcode = ERROR_SERVER
                logging.getLogger().error('HOOK %s : Error (inventory NOK)' % sys.argv[0])


def myCall():
    """
        Design your own call here

        a deferred should be passed to callFunction()
    """
    global exitcode

    hook = sys.argv[0]
    mac = '' # client MAC address
    name = '' # client ID
    key = '' # registering password (not used)
    if len(sys.argv) == 2: # "mac" version
        mac = sys.argv[1]
        logger.warning('HOOK %s : I was not given an name, proceeding anyway' % hook)
    elif len(sys.argv) == 3: # "mac + name" version
        mac = sys.argv[1]
        name = sys.argv[2]
    elif len(sys.argv) == 4: # "mac + name + pass" version
        mac = sys.argv[1]
        name = sys.argv[2]
        key = sys.argv[3]
        logger.warning('HOOK %s : I was given a password, but I don\'t now what to do woth it, so I dropped it' % hook)
    else:
        logger.error('HOOK %s : I was not called with the right number of arguments (one to three expected, got %d)' % (hook, len(sys.argv) - 1))
        exitcode = ERROR_CLIENT
        return endBack()

    if not pulse2.utils.isMACAddress(mac):
        logger.error('HOOK %s : First arg (%s) do not seems to be a MAC address' % (hook, mac))
        exitcode = ERROR_CLIENT
        return endBack()

    if not len(name):
        logger.error('HOOK %s : No name given' % hook)
        exitcode = ERROR_CLIENT
        return endBack()

    logger.debug('HOOK %s : Going to register computer %s (%s)' % (hook, name, mac))

    try:
        if config.invserver_glpi_mode :
            invfwd = RegisterByInventory(config)
            callFunction(invfwd.send(name, mac))
        else:
            callFunction(
                imagingAPI.computerRegister(
                    name,
                    mac,
                    False # imagingData = False, since we are not the mmc agent !
                )
            )
            
    except AttributeError, e:
        logger.error('HOOK %s : %s' % (hook, e))
        exitcode = ERROR_CLIENT
        return endBack()


def myTreatment(result):
    """
        Design your own treatment here

        don't forget to set exitcode and finally call endBack()
    """
    global exitcode
    hook = sys.argv[0]

    if result and result != None:
        exitcode= ERROR_OK
        logger.info('HOOK %s : SUCCESS !' % hook)
    else:
        exitcode = ERROR_SERVER
        logger.error('HOOK %s : Error server side !' % hook)

    # nothing else to do
    return endBack()

########################################################################
#         NOTHING SHOULD BE ALTERED BELOW THIS LINE                    #
########################################################################


def endBack(when = None):
    """
        take the reactor down
    """
    if when == "timeout" :
        logger.error('HOOK %s : Killed by a timeout' % sys.argv[0])
    twisted.internet.reactor.callLater(0, twisted.internet.reactor.stop)


def callBack(result):
    """
        XMLRPC result treatment

        check if it was a success by analysing result
        if it is a success, call myCall(result)
        if not, exitcode is set to ERROR_SERVER then call endBack()
    """
    
    global exitcode
    # if result is a list and the first arg a string and its value,
    # 'PULSE2_ERR', then something went wrong
    if type(result) == list and len(result) > 0 and type(result[0]) == str and result[0] == 'PULSE2_ERR':
        logger.error("HOOK %s : Error code = %d (see previous line)" % (sys.argv[0], result[1]))
        exitcode = ERROR_SERVER
        return endBack()
    else:
        logger.debug("%s : No error" % (sys.argv[0]))
        exitcode = ERROR_CLIENT
        myTreatment(result)


def errorBack(reason):
    """
        XMLRPC error treatment

        just set exitcode to ERROR_CLIENT then call endBack()
    """
    global exitcode
    exitcode = ERROR_CLIENT
    return endBack()


def callFunction(deffered):
    """
        XMLRPC request handling

        attach callBack() and errorBack() to the deferred
    """
    deffered.addCallbacks( # deferred handling
        callBack,
        errorBack)

# Parse the command line
config = pulse2.imaging_server.config.ImagingConfig() #: ConfigParser object
config.setup(CONFIG_FILE)
logging.config.fileConfig(CONFIG_FILE)

# Instanciate the API
imagingAPI = pulse2.apis.clients.imaging.ImagingApi({
    "server" : config.pserver_host,
    "port" : config.pserver_port,
    "mountpoint" : config.pserver_mount_point,
    "enablessl" : config.pserver_enablessl,
    "username" : config.pserver_username,
    "password" : config.pserver_password,
    "verifypeer" : config.pserver_verifypeer,
    "localcert" : config.pserver_localcert,
    "cacert" : config.pserver_cacert,
}) #: Object which will be used to speak with our pserver

# anti-blocking stuff
# I have 30 seconds to get my result or be killed
twisted.internet.reactor.callLater(10, endBack, "timeout")

# fire the reactor
twisted.internet.reactor.callWhenRunning(myCall)
twisted.internet.reactor.run()
sys.exit(exitcode)
