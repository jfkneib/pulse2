#!/usr/bin/python
# -*- coding: utf-8; -*-
#
# (c) 2010 Mandriva, http://www.mandriva.com
#
# $Id$
#
# This file is part of Pulse 2, http://pulse2.mandriva.org
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2. If not, see <http://www.gnu.org/licenses/>.
#

"""
    This is a generic hook skeleton to be used with pulse 2 imaging server
"""
import sys
import os.path
from twisted.internet import reactor
from twisted.internet.defer import succeed
from twisted.web.client import Agent
from twisted.web.http_headers import Headers
from twisted.web.iweb import IBodyProducer
from zope.interface import implements
import logging
import logging.config

from mmc.site import mmcconfdir
import pulse2.apis.clients.imaging
import pulse2.imaging_server.config
import pulse2.imaging.bootinventory

CONFIG_FILE = mmcconfdir + '/pulse2/imaging-server/imaging-server.ini' #: config file location

# default error code
ERROR_OK = 0        #: no error
ERROR_SERVER = 1    #: error server-side
ERROR_CLIENT = 2    #: error client-side (here)
ERROR_UNKNOWN = 3   #: unknow (and default) error
exitcode = ERROR_UNKNOWN #: global error code, used when exiting
mac = ''            # client MAC address

########################################################################
#         NOTHING SHOULD BE ALTERED ABOVE THIS LINE                    #
########################################################################

def loadInventory():
    """
        Load the PXE inventory from file
    """

    global exitcode
    global mac

    filename = '' # where the inventory is temporaly stored
    filestream = None
    data = None     # will hold our inventory (text)
    inventory = {}  # will hold our inventory (struct)

    if len(sys.argv) != 3: # not enough (or too much) args
        logging.getLogger().error('HOOK %s : I was not called with the right number of arguments (two expected, got %d)' % (sys.argv[0], len(sys.argv) - 1))
        exitcode = ERROR_CLIENT
        return endBack()

    mac = sys.argv[1]

    if not pulse2.utils.isMACAddress(mac):
        logging.getLogger().error('HOOK %s : First arg (%s) do not seems to be a MAC address' % (sys.argv[0], mac))
        exitcode = ERROR_CLIENT
        return endBack()

    filename = sys.argv[2]

    if not os.path.isfile(filename):
        logging.getLogger().error('HOOK %s : Second arg (%s) do not seems to be an existing file name' % (sys.argv[0], filename))
        exitcode = ERROR_CLIENT
        return endBack()

    try :
        filestream = open(filename)
        data = filestream.readlines()
        filestream.close()
    except:
        logging.getLogger().error('HOOK %s : Can\'t read %s, giving up' % (sys.argv[0], filename))
        exitcode = ERROR_CLIENT
        return endBack()

    inventory = pulse2.imaging.bootinventory.BootInventory(data)

    return inventory

def myImagingCall():
    """
        Design your own call here

        a deferred should be passed to callImaging()
    """
    global exitcode
    global mac

    try:
        inventory = loadInventory()
        callImaging(imagingAPI.injectInventory(mac, inventory.dump()))
    except AttributeError, e:
        logging.getLogger().error('HOOK %s : %s' % (sys.argv[0], e))
        exitcode = ERROR_CLIENT
        return endBack()

def myImagingResult(result):
    """
        Design your own treatment here

        don't forget to set exitcode and finally call endBack()
    """
    global exitcode

    if result and result != None:
        exitcode = ERROR_OK
        logging.getLogger().info('HOOK %s : SUCCESS (imaging OK)' % sys.argv[0])
    else:
        exitcode = ERROR_SERVER
        logging.getLogger().error('HOOK %s : Error (imaging NOK)' % sys.argv[0])

    reactor.callLater(0, myHostnameCall)

def myHostnameCall():
    """
        Get the hostname of the client
    """

    global exitcode
    global mac

    try:
        callImagingHostname(imagingAPI.getComputerByMac(mac))
    except AttributeError, e:
        logging.getLogger().error('HOOK %s : %s' % (sys.argv[0], e))
        exitcode = ERROR_CLIENT
        return endBack()

def myImagingHostnameResult(result):
    """
        Design your own treatment here

        don't forget to set exitcode and finally call endBack()
    """
    global exitcode

    logging.getLogger().debug("HOOK %s : Get hostname result: %s" % (sys.argv[0], str(result)))

    if result and result != None:
        exitcode = ERROR_OK

    reactor.callLater(0, myInventoryCall, result)

def myInventoryCall(computer):

    """
        Send an OCS like inventory to the inventory-server
    """

    global exitcode

    inventory = loadInventory()
    inventory = inventory.dumpOCS(computer['shortname'], computer['entity'])

    logging.getLogger().debug('%s : About to send the inventory to the inventory server' % sys.argv[0])

    agent = Agent(reactor)
    url = "http://%s:%s/"
    if config.invserver_enablessl:
        url = "https://%s:%s/"
    # POST the inventory to the inventory server
    class StringProducer(object):
        implements(IBodyProducer)

        def __init__(self, string):
            self.body = string
            self.length = len(self.body)

        def startProducing(self, consumer):
            consumer.write(self.body)
            return succeed(None)

    d = agent.request('POST',
                      url % (config.invserver_host, config.invserver_port),
                      Headers({
                        'Content-Type': ['application/x-www-form-urlencoded'],
                        'Content-Length': [str(len(inventory))],
                        'User-Agent': ['Pulse2 Imaging server inventory hook']
                      }),
                      StringProducer(inventory),
                     )
    callInventory(d)


def myInventoryResult(result):

    global exitcode

    if result and result != None:
        exitcode = ERROR_OK
        logging.getLogger().info('HOOK %s : SUCCESS (inventory OK)' % sys.argv[0])
    else:
        exitcode = ERROR_SERVER
        logging.getLogger().error('HOOK %s : Error (inventory NOK)' % sys.argv[0])

    # nothing more to do
    return endBack()


########################################################################
#         NOTHING SHOULD BE ALTERED BELOW THIS LINE                    #
########################################################################


def endBack(when = None):
    """
        Take the reactor down
    """
    if when == "timeout" :
        logging.getLogger().error('HOOK %s : Killed by a timeout' % sys.argv[0])
    reactor.callLater(0, reactor.stop)


def errorBack(reason):
    """
        XMLRPC error treatment

        just set exitcode to ERROR_CLIENT then call endBack()
    """
    global exitcode
    logging.getLogger().error("HOOK %s : Failed. Exiting." % sys.argv[0])
    exitcode = ERROR_CLIENT
    return endBack()


def callImaging(deffered):
    """
        XMLRPC request handling

        attach callBackImaging() and errorBack() to the deferred
    """
    deffered.addCallbacks( # deferred handling
        callBackImaging,
        errorBack)

def callBackImaging(result):
    """
        XMLRPC result treatment

        check if it was a success by analysing result
        if it is a success, call myImagingResult(result)
        if not, exitcode is set to ERROR_SERVER then call endBack()
    """

    global exitcode
    # if result is a list and the first arg a string and its value,
    # 'PULSE2_ERR', then something went wrong
    if type(result) == list and len(result) > 0 and type(result[0]) == str and result[0] == 'PULSE2_ERR':
        logging.getLogger().error("HOOK %s : Error code = %d (see previous line)" % (sys.argv[0], result[1]))
        exitcode = ERROR_SERVER
        return endBack()
    else:
        logging.getLogger().debug("%s : PXE Inventory sent" % (sys.argv[0]))
        exitcode = ERROR_CLIENT
        myImagingResult(result)

def callImagingHostname(deffered):
    """
        XMLRPC request handling

        attach callBackImagingHostname() and errorBack() to the deferred
    """
    deffered.addCallbacks( # deferred handling
        callBackImagingHostname,
        errorBack)

def callBackImagingHostname(result):
    """
        XMLRPC result treatment

        check if it was a success by analysing result
        if it is a success, call myImagingHostnameResult(result)
        if not, exitcode is set to ERROR_SERVER then call endBack()
    """

    global exitcode
    # if result is a list and the first arg a string and its value,
    # 'PULSE2_ERR', then something went wrong
    if type(result) == list and len(result) > 0 and type(result[0]) == str and result[0] == 'PULSE2_ERR':
        logging.getLogger().error("HOOK %s : Error code = %d (see previous line)" % (sys.argv[0], result[1]))
        exitcode = ERROR_SERVER
        return endBack()
    else:
        logging.getLogger().debug("%s : Hostname received" % (sys.argv[0]))
        exitcode = ERROR_CLIENT
        myImagingHostnameResult(result)

def callInventory(deffered):
    """
        HTTP request handling

        attach callBackInventory() and errorBack() to the deferred
    """
    deffered.addCallbacks(
        callBackInventory,
        errorBack)

def callBackInventory(result):
    """
        HTTP request result treatment

        check if it was a success by analysing result
        if it is a success, call myInventoryResult(result)
        if not, exitcode is set to ERROR_SERVER then call endBack()
    """

    global exitcode

    if result.code != 200:
        logging.getLogger().error("HOOK %s : Error sending the inventory to the inventory server" % sys.argv[0])
        logging.getLogger().error(result.phrase)
        exitcode = ERROR_SERVER
        return endBack()
    else:
        logging.getLogger().debug("%s : Inventory sent to the inventory server" % sys.argv[0])
        exitcode = ERROR_CLIENT
        myInventoryResult(result)


# Parse the command line
config = pulse2.imaging_server.config.ImagingConfig() #: ConfigParser object
config.setup(CONFIG_FILE)
logging.config.fileConfig(CONFIG_FILE)

# Instanciate the API
imagingAPI = pulse2.apis.clients.imaging.ImagingApi({
    "server" : config.pserver_host,
    "port" : config.pserver_port,
    "mountpoint" : config.pserver_mount_point,
    "enablessl" : config.pserver_enablessl,
    "username" : config.pserver_username,
    "password" : config.pserver_password,
    "verifypeer" : config.pserver_verifypeer,
    "localcert" : config.pserver_localcert,
    "cacert" : config.pserver_cacert,
}) #: Object which will be used to speak with our pserver

# anti-blocking stuff
# I have 30 seconds to get my result or be killed
reactor.callLater(30, endBack, "timeout")

# fire the reactor
reactor.callWhenRunning(myImagingCall)
reactor.run()
sys.exit(exitcode)
