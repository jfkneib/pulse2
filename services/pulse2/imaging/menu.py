# -*- coding: utf-8; -*-
#
# (c) 2009-2010 Mandriva, http://www.mandriva.com/
#
# $Id$
#
# This file is part of Pulse 2, http://pulse2.mandriva.org
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MMC.  If not, see <http://www.gnu.org/licenses/>.

"""
    client menu handling classes
"""

import pulse2.utils
import re
import os.path
import os
import logging
import time
import tempfile

def isMenuStructure(menu):
    """
    @return: True if the given object is a menu structure
    @rtype: bool
    """
    ret = True
    if type(menu) == dict:
        for k in ['message', 'protocol', 'default_item', 'default_item_wol',
                  'timeout', 'background_uri', 'bootservices', 'images', 'target']:
            if not k in menu:
                ret = False
                break
    else:
        ret = False
    return ret

class ImagingMenuBuilder:

    """
    Class that builds an imaging menu according to its dict structure
    """

    def __init__(self, config, uuid, menu):
        if not isMenuStructure(menu):
            raise TypeError
        self.menu = menu
        self.config = config
        # FIXME: macaddress should be resolved according to UUID
        self.macaddress = '00:11:22:33:44:55'

    def make(self):
        """
        @return: an ImagingMenu object
        """
        m = ImagingMenu(self.config, self.macaddress)
        m.setSplashScreen(self.menu['background_uri'])
        m.setMessage(self.menu['message'])
        m.setTimeout(self.menu['timeout'])
        m.setDefaultItem(self.menu['default_item'])
        for pos, entry in self.menu['bootservices'].items():
            m.addBootServiceEntry(entry, pos)
        return m

class ImagingMenu:
    """
        hold an imaging menu
    """

    mac = None # the client MAC Address
    config = None # the server configuration

    # menu items
    timeout = 0 # the menu timeout
    default_item = 0 # the menu default entry
    default_item_wol = 0 # the menu default entry on WOL
    splashscreen = None # the menu splashscreen
    message = None
    colors = { # menu colors
        'normal' : { 'fg': 7, 'bg': 1 },
        'highlight' : { 'fg': 15, 'bg': 3 }
    }
    keyboard = None # the menu keymap, None is C
    hidden = False # do we hide the menu ?

    menuitems = dict()

    additionnal = list() # additionnal keywords, put in the menu 'as is'

    def __init__(self, config, macaddress):
        """
            Initialize this object.
            config is a ImagingConfig object
            macAddress is the client MAC Address
        """
        self.config = config
        assert pulse2.utils.isMACAddress(macaddress)
        self.mac = macaddress

        # list of replacements to perform
        self.replacements = [ ('##PULSE2_F_BOOTSPLASH##',
                               'bootsplash.xpm',
                               'global'),
                              ('##PULSE2_F_DISKLESS##',
                               self.config.imaging_api['diskless_folder'],
                               'global')
                         ]
        # a replacement is using the following structure :
        # key 'from' : the PCRE to look for
        # key 'to' : the replacement to perform
        # key 'when' : when to perform the replacement (only 'global' for now)

    def _applyReplacement(self, string, condition = 'global'):
        """
            Private func, to apply a replacement into a given string

            Some examples :
            ##MAC:fmt## replaced by the client MAC address; ATM fmt can be:
              - short (pure MAC addr)
              - cisco (cisco-fmt MAC addr)
              - linux (linux-fmt MAC addr)
              - win (win-fmt MAC addr)
        """
        output = string
        for replacement in self.replacements:
            f, t, w = replacement
            if w == condition:
                output = re.sub(f, t, output)
        return output

    def buildMenu(self):
        # takes global items, one by one

        buf  = '# Auto-generated by Pulse 2 Imaging Server on %s \n\n' % time.asctime()

        if self.timeout:
            buf += 'timeout %s\n' % self.timeout
        buf += 'default %s\n' % self.default_item
        if self.splashscreen:
            buf += self._applyReplacement('splashscreen %s\n' % self.splashscreen)
        buf += 'color %d/%d %d/%d\n' % (
            self.colors['normal']['fg'],
            self.colors['normal']['bg'],
            self.colors['highlight']['fg'],
            self.colors['highlight']['bg']
        )
        if self.keyboard == 'fr':
            buf += 'keybfr\n'

        if self.hidden:
            buf += 'hide\n'

        buf += '\n'.join(self.additionnal)

        # then write items
        for i in range(1, len(self.menuitems)+1):
            output = self.menuitems[i].getEntry()
            buf += '\n'
            buf += output
        return buf

    def write(self):
        """
            write the client menu
        """
        buf = self.buildMenu()
        filename = os.path.join(self.config.imaging_api['bootmenus_folder'], pulse2.utils.reduceMACAddress(self.mac))

        try:
            fid, tempname = tempfile.mkstemp(dir=self.config.imaging_api['bootmenus_folder'])
            fid.write(buf)
            fid.close()            
            os.rename(tempname, filename)
        except OSError, e:
            logging.getLogger().error("While writing boot menu for %s : %s" % (self.mac, e))
            print e
            return False

        return True

    def read(self):
        """
            read the client menu
            don't expect the summoned structure to be usable :
            menu.lst <-> menu.conf if far for beeing a bijection
        """
        pass

    def setTimeout(self, value):
        """
            set the default timeout
        """
        self.timeout = value

    def getTimeout(self):
        """
            get the default timeout
        """
        return self.timeout

    def setDefaultItem(self, value):
        """
            set the default item number
        """
        assert(type(value) == int)
        self.default_item = value

    def getDefaultItem(self):
        """
            get the default item number
        """
        return self.default_item

    def addImageEntry(self, entry, position):
        """
        add the ImagingEntry entry to our menu
        if position is None, add it at the first slot available
        """
        if position in self.menuitems:
            raise ValueError
        self.menuitems[position] = ImagingImageItem(entry)

    def addBootServiceEntry(self, entry, position):
        """
            add the ImagingEntry entry to our menu
            if position is None, add it at the first slot available
        """
        if position in self.menuitems:
            raise ValueError
        self.menuitems[position] = ImagingBootServiceItem(entry)

    def removeEntry(self, position = None):
        """
            remove the entrey at position
            if position is None, remove the last image
        """
        pass

    def setKeyboard(self, map = None):
        """
            set keyboard map
            if map is none, do not set keymap
        """
        if map in ['fr']:
            self.keyboard = map

    def hideMenu(self):
        """
            Do hide the menu
        """
        self.hidden = True

    def showMenu(self):
        """
            Do show the menu
        """
        self.hidden = False

    def setProtocol(self, value):
        assert(value in ['nfs', 'tftp', 'mtftp'])
        self.protocol = value

    def setSplashScreen(self, value):
        assert(type(value) == unicode)
        self.splashscreen = value

    def setMessage(self, message):
        assert(type(message) == unicode)
        self.message = message

class ImagingImageItem:
    pass


class ImagingBootServiceItem:
    """
        hold an imaging menu item
    """

    title = None # the item title
    desc = None # the item desc
    value = None # the value to display

    def __init__(self, entry):
        """
            Initialize this object.
            title is mandatory, desc optionnal
            (in this case, desc takes the value of title)
        """
        print entry
        self.title = entry['name']
        self.desc = entry['desc']
        self.value = entry['value']
        assert(type(self.title) == unicode)
        assert(type(self.desc) == unicode)
        
    def getEntry(self):
        """
            return the entry, in a grub compatible format
        """
        buffer  = ''
        buffer += 'title %s\n' % self.title
        if self.desc:
            buffer += 'desc %s\n' % self.desc
        if self.value:
            buffer += self.value + '\n'
        return buffer

