#!/usr/bin/python
# -*- coding: utf-8; -*-
#
# (c) 2011-2012 Mandriva, http://www.mandriva.com/
#
# This file is part of Pulse 2, http://pulse2.mandriva.org
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2.  If not, see <http://www.gnu.org/licenses/>.

import json
import sys
from collections import namedtuple
from platform import platform
import subprocess


def pprinttable(rows):
    if len(rows) > 1:
        headers = rows[0]._fields
        lens = []
        for i in range(len(rows[0])):
            lens.append(len(max([str(x[i]) for x in rows] + [headers[i]],key=lambda x:len(str(x)))))
        formats = []
        hformats = []
        for i in range(len(rows[0])):
            if isinstance(rows[0][i], int):
                formats.append("%%%dd" % lens[i])
            else:
                formats.append("%%-%ds" % lens[i])
            hformats.append("%%-%ds" % lens[i])
        pattern = " | ".join(formats)
        hpattern = " | ".join(hformats)
        separator = "-+-".join(['-' * n for n in lens])
        print hpattern % tuple(headers)
        print separator
        for line in rows:
            print pattern % tuple(line)
    elif len(rows) == 1:
        row = rows[0]
        hwidth = len(max(row._fields,key=lambda x: len(x)))
        for i in range(len(row)):
            print "%*s = %s" % (hwidth,row._fields[i],row[i])
     
def runInShell(cmd, fatal=True, out_when_error=None):
    process = subprocess.Popen([cmd], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    out, err = process.communicate()
    
    # Check if errors or not
    if fatal and process.returncode != 0:
        sys.stdout.write(out)
        sys.stderr.write(out)
        sys.exit(process.returncode)
        
    # If out_when_error is defined, return it in case of error
    if out_when_error is not None and process.returncode != 0:
        out = out_when_error
        
    out = out.strip()
    return out, err, process.returncode
            
def showUpdateInfo(uuid, online=True):
    # uuid is pkgname/version
    pkg_name = uuid.split('/')[0]
    out, err, ec = runInShell("apt-cache show pulse2")
    print out
   
def getPackageVersion(pkg):
    cmd = "LANG=C apt-cache policy %s|awk '/Candidate/ { print $2 }'" % pkg
    version, err, ec = runInShell(cmd)
    return version
    
def searchAvaiableUpdates(online=True, returnResultList=False):
    

    # Init updates dict
    header = 'uuid,KB_Number,type,is_installed'.split(',')
    header_verbose = 'uuid,title,KB_Number,type,need_reboot,request_user_input,info_url,is_installed'.split(',')
    content = []
    content_verbose = []
    result = {'header' : header, 'content' : content}
    result_verbose = {'header' : header_verbose, 'content' : content_verbose}

    # Return OS class (debian based)
    # cat /etc/*-release|grep 'Debian\|debian' to check
    result_verbose['os_class'] = 4 # 4 = DEBIAN, 5 = UBUNTU ...

    # ===============================================================================
    # Running apt-get update
    runInShell("apt-get update")
    # ===============================================================================
    
    # Running Update searching command
    cmd = "LANG=C apt-get -s dist-upgrade | awk '/^Inst/ { print $2 }'"
    out, err, ec = runInShell(cmd)
    
    if out:
        new_packages = out.strip().split('\n')
    else:
        new_packages = []
    
    if returnResultList:
        return fetchW32ComArray(new_packages)

    # Formatting output dict
    for pkg in new_packages:
        
        # Get repository package version
        version = getPackageVersion(pkg)
            
        # If no version got, skipping
        if not version:
            continue

        # Setting package infos
        update_uuid = pkg + "/" + version
        
        _item = []
        _item_verbose = []

        # UUID (for debian based distros it is pkg_name/version)
        _item.append(update_uuid)
        _item_verbose.append(update_uuid)

        # Title
        cmd = "apt-cache show %s|awk '/^Description/ {first = $1; $1 = \"\"; print $0;}' | sed 's/^[[:space:]]*//'" % pkg
        title, err, ec = runInShell(cmd, False, pkg)
        _item_verbose.append('%s (update %s)' % (title.split('\n')[0], version)) #.encode('utf-8').decode('ascii', 'ignore')

        # Description
        #_item.append(update.Description) #.encode('utf-8').decode('ascii', 'ignore')
        #_item_verbose.append(update.Description) #.encode('utf-8').decode('ascii', 'ignore')

        #_item.append(update.EulaText)
        #_item_verbose.append(update.EulaText)

        # Kb_number (package name)
        _item.append(pkg)
        _item_verbose.append(pkg)

        # Type (type = 1)
        _item.append(1)
        _item_verbose.append(1)

        # Need reboot (doesnt need reboot)
        _item_verbose.append(False)

        # Request user input (False)
        _item_verbose.append(False)

        # Info URL
        #_item.append(fetchW32ComArray(update.MoreInfoUrls)[0])
        cmd = "apt-cache show %s|awk '/^Homepage/ {first = $1; $1 = \"\"; print $0;}' | sed 's/^[[:space:]]*//'" % pkg
        url, err, ec = runInShell(cmd, False, "")
        _item_verbose.append(url.split('\n')[0])

        # Is_installed
        _item.append(False)
        _item_verbose.append(False)

        content.append(_item)
        content_verbose.append(_item_verbose)

    return (result, result_verbose)


def installUpdates(uuid_list):
    # Building package list
    pkg_list = [x.split('/') for x in uuid_list]
    packages_to_install = []

    for pkg, version in pkg_list:
        
        # Checking if package version (in repo) is the same
        if getPackageVersion(pkg) != version:
            print "Skipping %s, candidate version doesn't match" % pkgs
            continue
        
        # Adding update to updatesToInstall list
        print 'Adding "%s/%s" to install list' % (pkg, version)
        packages_to_install.append(pkg)

    if not packages_to_install:
        print "No updates to install, leaving."
        return
    
    print "Installing updates ..."
    
    # Running apt-get install
    install_cmd = "apt-get -y install %s" % ' '.join(packages_to_install)
    print install_cmd
    out, err, ec = runInShell(install_cmd)
    print out

    return 0


if __name__ == '__main__':
    args = sys.argv
    
    if len(args) < 2:
        print "pulse-update-manager 0.4 for debian based distributions"
        print "Usage : \tpulse-update-manager [options] [update_list]"
        print ""
        print "Options:"
        print "  -l, --list : List all updates available for this machine"
        print "  --offline : List mode, list cached updates (offline mode)"
        print "  --json : List mode, output in JSON format"
        print "  -i, --install : Install specified updates (uuid or kb_number)"
        print ""
        print ""
        print "Examples:"
        print "  pulse-update-manager -l --offline --json"
        print "  pulse-update-manager --install 2791765 2741517"
        sys.exit(0)

    command = args[1]
    
    # Specific update info
    if command == '-d' or command == '--detail':
        if (len(args) < 3):
            print "You must specify update UUID"
            sys.exit(0)
        online = not ('--offline' in args)
        showUpdateInfo(args[2], online)
    
    # Update install switches
    if '-i' in args or '--install' in args:
        installUpdates(args[2:])
    
    # Update listing switches
    if '--list' in args or '-l' in args:
        # Search all available updates
        print "Searching for updates ..."
        #
        online = not ('--offline' in args)
    
        (result, result_verbose) = searchAvaiableUpdates(online)
    
        if '--json' in args:
            # Printing JSON
            print "===JSON_BEGIN==="
            print json.dumps(result_verbose)
            print "===JSON_END==="
        elif '--otherformat' in args:
            pass
        else:
            # Printing table
            Row = namedtuple('Row', result['header'])
            pprinttable([Row(*item) for item in result['content']])
    
    
    sys.exit(0)
